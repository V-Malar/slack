java-training
@haarisinfotech
 created this channel on July 6th. This is the very beginning of the java-training channel. Description: This channel is for everything #java-training. Hold meetings, share docs, and make decisions together with your team. (edit)


haarisinfotech
  12:07 PM
joined #java-training. Also, Haaris sm
 and 18 others joined.


haarisinfotech
  12:42 PM
3 files
 

BasicOpen-LabBook.pdf
PDF



Basics-Closed-LabBook.pdf
PDF



CoreJava-Assignments-Part1.pdf
PDF




haarisinfotech
  1:28 PM
2 files
 

DiseaseAssignment1.docx
Word Document

java-proj .zip
Zip


haarisinfotech
  9:41 AM
4 files
 

Core Java.pdf
PDF



Head.First.Java.Second.Edition-scanned.pdf
PDF



Java.The.Complete.Reference.7th.Edition.pdf
PDF



CORE JAVA MATERIAL.pdf
PDF




haarisinfotech
  10:02 AM
2 files
 

CORE JAVA TEST PAPER 2.pdf
PDF

CORE JAVA TEST PAPER.pdf
PDF
10:03
The above two documents are SCJP question papers, Please give answers to them and send the snapshot of the write answers via this slack, both are open book test, u can use internet or boots
10:03
books
10:04
Write in a separate sheet, the question number and the right options also mention your name above the sheet.  take a snap shot and post it in slack.


haarisinfotech
  10:10 AM
This lab book, please submit before saturday night.
PDF
 

CORE JAVA LAB ASSIGNMENT-BASIC.pdf
PDF




Anjali Kumari
  2:24 PM
++
This file was deleted.


haarisinfotech
  11:17 AM
package basics;
public class OverloadDemo {
	public static void main(String[] args) {
		StructuredHuman gokul=new StructuredHuman();
		gokul.play(new VolleyBall());
	}
}
class Human{
	public void play(FootBall fb) {
		System.out.println("play by leg...");
	}
	public void play(VolleyBall vb) {
		System.out.println("play by hand....");
	}
	public void play(HockeyStick hs) {
		System.out.println("play with stick....");
	}	
}
class StructuredHuman{
	public void play(Object obj) {
		if(obj instanceof FootBall) {
			System.out.println("play by leg......................................");
		}
		else if(obj instanceof VolleyBall) {
			System.out.println("play by hand......................................");
		}
		else if(obj instanceof HockeyStick) {
			System.out.println("play with stick....................................");
		}
	}
}
class FootBall{}
class VolleyBall{}
class HockeyStick{}


haarisinfotech
  11:55 AM
package basics;
public class OpenCloseDemo {
	public static void main(String[] args) {
		GoodPaintBrush gp=new GoodPaintBrush();
		gp.doPaint(new BluePaint());
	}
}
class BadPaintBrush{
	public void doPaint(int i) {
		if(i==1) {
			System.out.println("red paint.....");
		}
		else if(i==2) {
			System.out.println("blue paint....");
		}
	}
}
class GoodPaintBrush{
	public void doPaint(Paint p) {
		p.color();
	}
}
abstract class Paint{
	public abstract void color();
}
class RedPaint extends Paint{
	@Override
	public void color() {
		System.out.println("red colour...");
	}
}
class BluePaint extends Paint{
	@Override
	public void color() {
		System.out.println("blue colour....");
	}
}
/*
 * Trick to remove if-else-if conditions
 * 1. Convert the condition to classes
 * 2. Place them under a hierarchy
 * 3. Create a association between the hierarchial class and the using class
 */


haarisinfotech
  1:14 PM
package basics;
public class OverRidingDemo {
	public static void main(String[] args) {
		OverRide or=new SubOverRide();
		or.met();
	}
}
class Hall {
	public Hall() {
		System.out.println("super class object created...");
	}
	public void met() {
		System.out.println("over ride class method called..");
	}
}
class MarriageHall extends Hall{
	public MarriageHall() {
		System.out.println("sub class object created....");
	}
}


prashanth kumar
  2:14 PM
Sir two inheritance books?


haarisinfotech
  2:23 PM
2 files
 

Head First - Design Patterns.pdf
PDF



head-first-object-oriented-analysis-and-design.pdf
PDF




haarisinfotech
  11:45 AM
package oops;
abstract public class Pizza {
	final public void pizzaShape() {
		System.out.println("pizza shape should be circle......");
	}
	final public void useWheat() {
		System.out.println("pizza is created using wheat IR65...");
	}
	public abstract void makePizza();
}
abstract class Dominos extends Pizza{
	@Override
	final public void makePizza() {//template method...
		bakingPizza();
		addIngredients();
		packing();
	}
	final public void packing() {
		System.out.println("dominos standard of packing....");
	}
	final public void bakingPizza() {
		System.out.println("baking pizza as per dominos...");
	}
	final public void addIngredients() {
		System.out.println("adding ingredients as per dominos....");
	}
	final public void doAdvertisement() {
		System.out.println("advertise as per dominos...");
	}
	public abstract void sellPizza();
	public abstract void deliverPizza();
	
	final public void doPizzaBusiness() {//template method
		doAdvertisement();
		makePizza();
		deliverPizza();
	}	
}
class GokulDominos extends Dominos{
	@Override
	public void deliverPizza() {
		System.out.println("delivery as per gokul standards....");
	}
	@Override
	public void sellPizza() {
		System.out.println("gokul will collect money in rupees...");		
		doPizzaBusiness();
	}
}


haarisinfotech
  1:24 PM
package oops;
public interface ExIm {
	private void permittedItemsToImport() {
		System.out.println("Import items as per indian government standards....");
	}
	private void permittedItemsToExport() {
		System.out.println("Export items as per indian government standards.....");
	}
	private void currencyForPayment() {//final methods
		System.out.println("payment currency chooen as per indian standard.....");
	}
	default void doImportExport() {//template method
		permittedItemsToExport();
		permittedItemsToImport();
		raiseLetterOfCredit();
		currencyForPayment();
		transport();
	}
	public void raiseLetterOfCredit();
	public void transport();
}
class GokulExportImport implements ExIm{
	@Override
	public void raiseLetterOfCredit() {
		System.out.println("gokul raises LC as per gokuls requirements...");
	}
	@Override
	public void transport() {
		System.out.println("gokul supplies tea to america in cycle....");
	}
}
1:24
package oops;
public class EximDemo {
	public static void main(String[] args) {
		ExIm exportHouse=new GokulExportImport();
		
		exportHouse.doImportExport();
	}
}
1:25
package oops;
public class IbacoDemo {
	public static void main(String[] args) {
		IbacoIceCream myiceCream=new Vanila(new StrawBerry(new Choclate(new Cherries(new Vanila()))));
		System.out.println("Cost Of IceCream..:"+myiceCream.cost());
	}
}
abstract class IbacoIceCream{
	public abstract int cost();
}
abstract class Cream extends IbacoIceCream{
	
}
abstract class Topings extends IbacoIceCream{
	
}
class Vanila extends Cream{
	IbacoIceCream ic;
	public Vanila() {
		// TODO Auto-generated constructor stub
	}
	public Vanila(IbacoIceCream ic) {
		this.ic=ic;
	}
	@Override
	public int cost() {
		// TODO Auto-generated method stub
		if(ic!=null) {
			return 10 + ic.cost();
		}
		else {
			return 10;
		}
	}
}
class StrawBerry extends Cream{
	public StrawBerry() {
		// TODO Auto-generated constructor stub
	}
	IbacoIceCream ic;
	public StrawBerry(IbacoIceCream ic) {
		this.ic=ic;
	}
	@Override
	public int cost() {
		// TODO Auto-generated method stub
		if(ic!=null) {
			return 20 + ic.cost();
		}
		else {
			return 20;
		}
	}
}
class Cherries extends Topings{
	public Cherries() {
		// TODO Auto-generated constructor stub
	}
	IbacoIceCream ic;
	public Cherries(IbacoIceCream ic) {
		this.ic=ic;
	}
	@Override
	public int cost() {
		if(ic!=null) {
			return 5+ic.cost();
		}
		else {
			return 5;
		}
	}
}
class Choclate extends Topings{
	public Choclate() {
		// TODO Auto-generated constructor stub
	}
	IbacoIceCream ic;
	public Choclate(IbacoIceCream ic) {
		this.ic=ic;
	}
	@Override
	public int cost() {
		if(ic!=null) {
			return 10+ic.cost();
		}
		else {
			return 10;
		}
	}
}
1:25
package oops;
import java.io.BufferedInputStream;
import java.io.InputStreamReader;
public class AdapterDemo {
	public static void main(String[] args) {
		
		AmericanPlugStandard lenovo=new LenovoPlug();
		
		IndianSocketStandard shakthisocket=new ShakthiSocket();
		
		//shakthisocket.roundPinHole(lenovo);
		
		IndianAdapterPlug indianPlug=new IndianAdapterPlug();
		indianPlug.americanPlug=lenovo;
		
		shakthisocket.roundPinHole(indianPlug);
	}
}
abstract class AmericanPlugStandard{
	public abstract void slabPin();
}
abstract class AmericanSocketStandard{
	public abstract void slabPinHole(AmericanPlugStandard plug);
}
abstract class IndianPlugStandard{
	public abstract void roundPin();
}
abstract class IndianSocketStandard{
	public abstract void roundPinHole(IndianPlugStandard plug);
}
class LenovoPlug extends AmericanPlugStandard{
	@Override
	public void slabPin() {
		System.out.println("american slab pin working...");
	}
}
class ShakthiSocket extends IndianSocketStandard{
	@Override
	public void roundPinHole(IndianPlugStandard plug) {
		plug.roundPin();		
	}
}
class IndianAdapterPlug extends IndianPlugStandard{
	AmericanPlugStandard americanPlug;
	@Override
	public void roundPin() {
		americanPlug.slabPin();
	}
}
1:26
package oops;
public class SingleTonDemo {
	public static void main(String[] args) {
		new Thread(new Runnable() {			
			@Override
			public void run() {
				MySingleTon mys=MySingleTon.createObject();				
			}
		}).start();
		new Thread(new Runnable() {			
			@Override
			public void run() {
				MySingleTon mys=MySingleTon.createObject();				
			}
		}).start();
	}
}
class MySingleTon{
	private MySingleTon() {		
		System.out.println("mysingleton obj created...");
	}
	static MySingleTon obj;
	synchronized public static MySingleTon createObject() {
		if(obj==null) {			
			obj=new MySingleTon();
		}
		return obj;
	}
}
1:26
package oops;
public class DominosDemo {
	public static void main(String[] args) {
		Dominos dominosPizza=new GokulDominos();
		
		dominosPizza.sellPizza();
		
	}
}
1:26
package oops;
abstract public class Pizza {
	final public void pizzaShape() {
		System.out.println("pizza shape should be circle......");
	}
	final public void useWheat() {
		System.out.println("pizza is created using wheat IR65...");
	}
	public abstract void makePizza();
}
abstract class Dominos extends Pizza{
	@Override
	final public void makePizza() {//template method...
		bakingPizza();
		addIngredients();
		packing();
	}
	final public void packing() {
		System.out.println("dominos standard of packing....");
	}
	final public void bakingPizza() {
		System.out.println("baking pizza as per dominos...");
	}
	final public void addIngredients() {
		System.out.println("adding ingredients as per dominos....");
	}
	final public void doAdvertisement() {
		System.out.println("advertise as per dominos...");
	}
	public abstract void sellPizza();
	public abstract void deliverPizza();
	
	final public void doPizzaBusiness() {//template method
		doAdvertisement();
		makePizza();
		deliverPizza();
	}	
}
class GokulDominos extends Dominos{
	@Override
	public void deliverPizza() {
		System.out.println("delivery as per gokul standards....");
	}
	@Override
	public void sellPizza() {
		System.out.println("gokul will collect money in rupees...");		
		doPizzaBusiness();
	}
}


haarisinfotech
  11:07 AM
package oops;
public class CloneDemo {
	public static void main(String[] args)throws Exception {
		//MULTITON - Resources are unique and properties are also unique..
		/*Sheep mothersheep=new Sheep();
		 *mothersheep.name="iam the mother sheep...";
		Sheep dolly=new Sheep();
		dolly.name="iam the dolly...";
		
		System.out.println(mothersheep.name);
		System.out.println(dolly.name);
		 */
		//SINGLETON - Resources are shared and propoerties are also shared
		/*Sheep mothersheep=new Sheep();
		mothersheep.name="iam the mother sheep...";
		Sheep dolly=mothersheep;
		dolly.name="iam the dolly...";
		
		System.out.println(mothersheep.name);
		System.out.println(dolly.name);
		*/
		//CLONING - Resources are shared but properties are unique
		Sheep mothersheep=new Sheep();
		Sheep dolly=(Sheep)mothersheep.createClone();
		mothersheep.name="iam the mother sheep...";
		dolly.name="iam the dolly...";
		
		System.out.println(mothersheep.name);
		System.out.println(dolly.name);
	}
}
class Sheep implements Cloneable{
	String name;
	public Sheep() {
		System.out.println("sheep object created...");
	}
	public Object createClone()throws Exception {
		return super.clone();
	}
}


haarisinfotech
  12:34 PM
package oops;
public class InnerClassDemo {
	public static void main(String[] args) {
		Pepsi pepsico=new Pepsi();
		//Cola cola=new Kalimark().new CampaCola();//this is how you access a non static inner class
		//pepsico.makePepsi(new Kalimark().stephenElop());
		
		
		Cola  cola=new Kalimark.CampaCola();//this is how you access a static inner class
		
		//kali.makeBovonto();
	}
}
abstract class Cola{
	public abstract void makeCola();
}
class Pepsi {
	public void makePepsi(Cola cola) {
		cola.makeCola();
		System.out.println("pepsi company fills in pepsi bottle and sells.....");
	}
}
class Kalimark {
	public void makeBovonto() {
//		class CampaCola extends Cola{
//			@Override
//			public void makeCola() {
//				System.out.println("campa cola makes cola...");
//			}
//		}
//		new CampaCola().makeCola();
		//anonymous inner class
		new Cola() {			
			@Override
			public void makeCola() {
				// TODO Auto-generated method stub
				System.out.println("campa cola cola is now made as kalimark cola...");
			}
		}.makeCola();
		System.out.println("kalimark company fills in bovonto bottle and sells.....");
	}
	
//	public Cola stephenElop() {
//		return new CampaCola();
//	}
	
	static class CampaCola extends Cola{
		@Override
		public void makeCola() {
			System.out.println("make cola from static campa cola class....");
		}
	}
}


haarisinfotech
  12:55 PM
package oops;
public class BuilderPattern {
	public static void main(String[] args) {
		Computer mycomputer=new Computer.RitchieStreet().
					setMonitor(new Monitor()).
					setCabin(new Cabin()).setMotherBoard(new MotherBoard()).build();
		System.out.println(mycomputer);
	}
}
class Computer{
	private Monitor samsung;
	private KeyBoard tvs;
	private Ram ddr;
	private HardDisk seaGate;
	private Cabin zeptron;
	private MotherBoard intel;
	public Computer() {
		// TODO Auto-generated constructor stub
	}
	public Computer(RitchieStreet rs) {
		this.samsung=rs.samsung;
		this.tvs=rs.tvs;
		this.ddr=rs.ddr;
		this.seaGate=rs.seaGate;
		this.zeptron=rs.zeptron;
		this.intel=rs.intel;
	}
	
	@Override
	public String toString() {
		return "Computer [samsung=" + samsung + ", tvs=" + tvs + ", ddr=" + ddr + ", seaGate=" + seaGate + ", zeptron="
				+ zeptron + ", intel=" + intel + "] The total cost is...:"+totalCost();
	}
	int cost=0;
	private int totalCost() {
		
		if(samsung!=null) {
			cost=cost+samsung.cost;
		}
		if(tvs!=null) {
			cost=cost+tvs.cost;
		}
		if(ddr!=null) {
			cost=cost+ddr.cost;
		}
		if(seaGate!=null) {
			cost=cost+seaGate.cost;
		}
		if(zeptron!=null) {
			cost=cost+zeptron.cost;
		}
		if(intel!=null) {
			cost=cost+intel.cost;
		}
		return cost;
	}
	static class RitchieStreet{
		private Monitor samsung;
		private KeyBoard tvs;
		private Ram ddr;
		private HardDisk seaGate;
		private Cabin zeptron;
		private MotherBoard intel;
		
		public RitchieStreet setMonitor(Monitor m) {
			this.samsung=m;
			return this;
		}
		public RitchieStreet setKeyboard(KeyBoard m) {
			this.tvs=m;
			return this;
		}
		public RitchieStreet setRam(Ram m) {
			this.ddr=m;
			return this;
		}
		public RitchieStreet setHarddisk(HardDisk m) {
			this.seaGate=m;
			return this;
		}
		public RitchieStreet setCabin(Cabin m) {
			this.zeptron=m;
			return this;
		}
		public RitchieStreet setMotherBoard(MotherBoard m) {
			this.intel=m;
			return this;
		}
		public Computer build() {
			return new Computer(this);
		}
	}
}
class Monitor{
	int cost=6000;
}
class KeyBoard{
	int cost=500;
}
class Ram{
	int cost=3000;
}
class Cabin{
	int cost=2000;
}
class HardDisk{
	int cost=5000;
}
class MotherBoard{
	int cost=8000;
}


haarisinfotech
  1:31 PM
package oops;
public class FactoryPattern {
	public static void main(String[] args) {
		ShoeShop seller=new RamuShoeShop();
		
		ShoeFactory bsf=new LakhaniShoeFactory();
		
		//dependency injection
		
		seller.setFactory(bsf);
		
		Customer customer=new Customer();
		customer.name="ramu";
		Shoe shoe=seller.sell(customer);
		System.out.println(shoe);
		
	}
}
abstract class Shoe{
	
}
class SportsShoe extends Shoe{}
class LeatherShoe extends Shoe{}
interface Manufacturer{
	public Shoe make();
}
interface ShoeManufacturer extends Manufacturer{
	default public Shoe make() {
		return makeShoe();
	}
	public Shoe makeShoe();
}
interface Seller{
	public Shoe sell(Customer customer);
}
interface ShoeSeller extends Seller{
	default public Shoe sell(Customer customer) {
		return sellShoe(customer);
	}
	public Shoe sellShoe(Customer customer);
}
class Customer{
	String name;
}
abstract class ShoeFactory implements ShoeManufacturer{
	
}
class BataShoeFactory extends ShoeFactory{
	@Override
	public Shoe makeShoe() {
		return new LeatherShoe();
	}
}
class LakhaniShoeFactory extends ShoeFactory{
	@Override
	public Shoe makeShoe() {
		return new SportsShoe();
	}
}
abstract class ShoeShop implements ShoeSeller{
	private ShoeFactory factory;
	public void setFactory(ShoeFactory factory) {
		this.factory=factory;
	}
	public ShoeFactory getFactory() {
		return this.factory;
	}
}
class RamuShoeShop extends ShoeShop{
	@Override
	public Shoe sellShoe(Customer customer) {
		// TODO Auto-generated method stub
		return getFactory().makeShoe();
	}
}
1:31
package oops;
public class CommandPattern {
	public static void main(String[] args) {
		ESeva seva=new ESeva();
		
		Hospital hospital=new Hospital();
		Police police=new Police();
		Corporation corporation=new Corporation();
		Airline airline=new Airline();
		
		Command bodyTransferCommand=new DeadBodyTransport(hospital,police,corporation,airline);
		
		seva.setCommand(bodyTransferCommand, 1);
		
		seva.executeCommand(1);
		
	}
}
class Hospital{
	public void releaseBody() {
		System.out.println("dead body released...");
	}
	public void doEmbalm() {
		System.out.println("dead body embalmed...");
	}
}
class Police{
	public void legalClearance() {
		System.out.println("police start investigation..");
		System.out.println("police cleared the process...");
	}
}
class Corporation{
	public void deathCertificate() {
		System.out.println("corporation releases death certificate...");
	}
}
class Airline{
	public void transportBody() {
		System.out.println("body transported via air...");
	}
}
abstract class Command{
	public abstract void execute();
}
class DeadBodyTransport extends Command{
	public DeadBodyTransport() {
		// TODO Auto-generated constructor stub
	}
	Hospital hospital;
	Police police;
	Corporation corporation;
	Airline airline;
	public DeadBodyTransport(Hospital hospital,Police police,Corporation corporation,Airline airline) {
		this.hospital=hospital;
		this.police=police;
		this.corporation=corporation;
		this.airline=airline;
	}
	
	@Override
	public void execute() {
		System.out.println("The dead body transport job started...");
		hospital.releaseBody();
		hospital.doEmbalm();
		police.legalClearance();
		corporation.deathCertificate();
		airline.transportBody();
		System.out.println("Process over....");
	}
}
class ESeva {
	Command commands[]=new Command[5];
	public ESeva() {
		for(int i=0;i<commands.length;i++) {
			commands[i]=new Command() {				
				@Override
				public void execute() {
					System.out.println("I am dummy command.....");
				}
			};
		}
	}
	public void setCommand(Command c,int slot) {
		commands[slot]=c;
	}
	public void executeCommand(int slot) {
		commands[slot].execute();
	}
}
1:31
package oops;
import java.util.Scanner;
public class FanDemo {
	public static void main(String[] args) {
//		BadFan shaitan=new BadFan();
//		Scanner scan=new Scanner(System.in);
//		while(true) {
//			shaitan.pull();
//			scan.next();
//		}
		GoodFan khaitan=new GoodFan();
		Scanner scan=new Scanner(System.in);
		while(true) {
			khaitan.pull();
			scan.next();
		}
	}
}
class BadFan{
	int state=0;
	public void pull() {
		if(state==0) {
			state=1;
			System.out.println("switch on state....");
		}
		else if(state==1) {
			state=2;
			System.out.println("low speed state....");
		}
		else if(state==2) {
			state=3;
			System.out.println("medium speed state....");
		}
		else if(state==3) {
			state=4;
			System.out.println("high speed state....");
		}
		else if(state==4) {
			state=0;
			System.out.println("switch off speed state....");
		}
	}
}
class GoodFan{
	State state=new SwitchOffState();
	public void pull() {
		state.pull(this);
	}
}
abstract class State{
	public abstract  void pull(GoodFan fan);
}
class SwitchOffState extends State{
	@Override
	public void pull(GoodFan fan) {
		fan.state=new SwitchOnState();
		System.out.println("switch on state.....");
	}
}
class SwitchOnState extends State{
	@Override
	public void pull(GoodFan fan) {
		fan.state=new LowSpeedState();
		System.out.println("Low Speed state.....");
	}
}
class LowSpeedState extends State{
	@Override
	public void pull(GoodFan fan) {
		fan.state=new MediumSpeedState();
		System.out.println("Medium Speed state.....");
	}
}
class MediumSpeedState extends State{
	@Override
	public void pull(GoodFan fan) {
		fan.state=new HighSpeedState();
		System.out.println("High Speed state.....");
	}
}
class HighSpeedState extends State{
	@Override
	public void pull(GoodFan fan) {
		fan.state=new SwitchOffState();
		System.out.println("swith off state.....");
	}
}
1:33
singleton,prototype,factory,factorymethod,abstractfactory,builder
command, strategy, state, template method, visitor
adaptor, bridge, decorator, flyweight


haarisinfotech
  11:24 AM
package exceppack;
public class ExceptionDemo1 {
	public static void main(String[] args) {
		System.out.println("before exception...");
		try {
			int i=1/0;
		}catch(ArithmeticException e) {
			System.out.println("muttai muttai......");
		}catch(ArrayIndexOutOfBoundsException ae) {
			
		}catch(Exception e) {
			
		}
		finally {
			System.out.println("finally called....");
		}
		System.out.println("After exception...");
	}
}


haarisinfotech
  1:22 PM
package exceppack;
import java.util.Scanner;
public class ExcepDemo2 {
	public static void main(String[] args)throws Exception {
		Scanner scan=new Scanner(System.in);
		Dog tiger=new Dog();
		Child baby=new Child();
		
		System.out.println("Please enter the item class name...:");
		String itemclassname=scan.nextLine();
		Item item=(Item)Class.forName(itemclassname).newInstance();
		
		baby.playWithDog(tiger, item);
	}
	
}
class Handler911{
	public void handle(DogBiteException dbe) {
		System.out.println("hold on we are sending ambulance.....");
	}
	public void handle(DogBarkException dre) {
		System.out.println("barking dogs seldom bite......");
	}
	public void handle(DogPlayException dpe) {
		System.out.println("enjoy, dog wants to play with you....");
	}
	public void handle(DogHappyException dpe) {
		System.out.println("enjoy, dog is very happy...have fun.........");
	}
}
class Dog{
	public void play(Item item)throws DogExceptions {
		item.play();
	}
}
class Child{
	public void playWithDog(Dog dog,Item item) {
		try {
			dog.play(item);
		}catch(DogExceptions de) {
			de.printStackTrace();
			de.visit();
		}
	}
}
abstract class Item{
	public abstract void play()throws DogExceptions;
}
class StickItem extends Item{
	@Override
	public void play()throws DogExceptions {
		throw new DogBiteException();
	}
}
class StoneItem extends Item{
	@Override
	public void play() throws DogExceptions {
		throw new DogBarkException();
	}
}
class BallItem extends Item{
	@Override
	public void play() throws DogExceptions {
		throw new DogPlayException();
	}
}
class BiscuitItem extends Item{
	@Override
	public void play() throws DogExceptions {
		throw new DogHappyException();
	}
}
abstract class DogExceptions extends Exception{
	abstract void visit();
}
class DogBiteException extends DogExceptions{
	@Override
	void visit() {
		new Handler911().handle(this);
	}
}
class DogBarkException extends DogExceptions{
	@Override
	void visit() {
		new Handler911().handle(this);
	}
}
class DogPlayException extends DogExceptions{
	@Override
	void visit() {
		new Handler911().handle(this);
	}
}
class DogHappyException extends DogExceptions{
	@Override
	void visit() {
		new Handler911().handle(this);
	}
}
1:22
package exceppack;
public class ExceptionDemo1 {
	public static void main(String[] args) {
		System.out.println("before exception...");
		if(args.length>0) {
			String s=args[0];
			if(Character.isDigit(s.charAt(0))) {
				int n=Integer.parseInt(s);
				if(n==0) {
					System.out.println("Please enter a number other than zero...");
				}
				else {
					int x=1/n;
				}
			}
			else {
				System.out.println("Please enter a number value...");
			}
		}
		else {
			System.out.println("please enter a argument value...");
		}
	}
}


haarisinfotech
  1:14 PM
package oops;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
public class IntrosDemo {
	public static void main(String[] args) throws Exception{
		PoliceStation p1=new PoliceStation();
		Politician kabali=new Politician();		
		Tailor kuppuswamy=new Tailor();		
		//p1.arrest(kuppuswamy);
		p1.arrest(kabali);
	}
}
class Politician{
	public String name="I am a good man...naan rombo nallavan...busy...";
	private String secretName="gunda...";
	
	public void socialWork() {
		System.out.println("I am a good man.....");
	}
	
	private void stealPublicMoney() {
		System.out.println("my money my money ..your money my money.....");
	}
}
class Tailor{public String name="gentleman";}
class PoliceStation{
	public void arrest(Object p)throws Exception {
		Class c=p.getClass();
		Field f=c.getField("name");
		System.out.println(f.get(p));
		
		Method m=c.getMethod("socialWork");
		m.invoke(p);
		
		//torture room
		
		f=c.getDeclaredField("secretName");
		f.setAccessible(true);
		System.out.println(f.get(p));
		
		m=c.getDeclaredMethod("stealPublicMoney");
		m.setAccessible(true);
		m.invoke(p);
		
	}
}


haarisinfotech
  10:27 AM
package oops;
import java.util.Scanner;
public class VisitorDemo {
	public static void main(String[] args) throws Exception{
		Child baby=new Child();
		Dog tiger=new Dog();
		
		Scanner scan=new Scanner(System.in);
		System.out.println("please enter the item class name..:");
		String itemclassname=scan.nextLine();
		Item item=(Item)Class.forName(itemclassname).getConstructor().newInstance();
		
		baby.play(item, tiger);
		
	}
}
class Child{
	public void play(Item item,Animal animal) {
		animal.play(item);
	}
}
abstract class Item{
	abstract void executeItem();
}
class Stick extends Item{
	public Stick() {
		// TODO Auto-generated constructor stub
	}
	@Override
	void executeItem() {
		System.out.println("beat with stick....");
	}
}
abstract class Animal{
	abstract void play(Item item);
}
class Dog extends Animal{
	@Override
	void play(Item item) {
		item.executeItem();
	}
}


haarisinfotech
  10:56 AM
package oops;
import java.util.Scanner;
public class VisitorDemo {
	public static void main(String[] args) throws Exception{
		Child baby=new Child();
		Dog tiger=new Dog();
		
		Scanner scan=new Scanner(System.in);
		System.out.println("please enter the item class name..:");
		String itemclassname=scan.nextLine();
		Item item=(Item)Class.forName(itemclassname).getConstructor().newInstance();
		
		baby.play(item, tiger);
		
	}
}
abstract class DogExceptions extends Exception{
	abstract void visit();
}
class DogBiteException extends DogExceptions{
	String s;
	public DogBiteException(String s) {
		this.s=s;
	}
	@Override
	public String toString() {
		return "Exception is...:"+s;
	}
	@Override
	void visit() {
		new Handler911().handle(this);			
	}
}
class DogBarkException extends DogExceptions{
	String s;
	public DogBarkException(String s) {
		this.s=s;
	}
	@Override
	public String toString() {
		return "Exception is...:"+s;
	}
	void visit() {
		new Handler911().handle(this);			
	}
}
class DogHappyException extends DogExceptions{
	String s;
	public DogHappyException(String s) {
		this.s=s;
	}
	@Override
	public String toString() {
		return "Exception is...:"+s;
	}
	void visit() {
		new Handler911().handle(this);			
	}
}
class Handler911 {
	public void handle(DogBiteException dbe) {
		dbe.printStackTrace();
		System.out.println("Will send you ambulance.....dont be panic...");
	}
	public void handle(DogBarkException dbe) {
		dbe.printStackTrace();
		System.out.println("Barking dogs seldom bite........dont be panic...");
	}
	public void handle(DogHappyException dbe) {
		dbe.printStackTrace();
		System.out.println("just enjoy..dog loves biscuit........dont be panic...");
	}
}
class Child{
	public void play(Item item,Animal animal) {
		try {
			animal.play(item);
		}	
		catch(DogExceptions de) {
			de.visit();
		}
	}
}
abstract class Item{
	abstract void executeItem()throws DogExceptions;
}
class Stick extends Item{
	public Stick() {
		// TODO Auto-generated constructor stub
	}
	@Override
	void executeItem()throws DogExceptions {
		System.out.println("beat with stick....");
		throw new DogBiteException("you beat I bite...");
	}
}
class Stone extends Item{
	public Stone() {
		// TODO Auto-generated constructor stub
	}
	@Override
	void executeItem()throws DogExceptions {
		System.out.println("throw stone at dog....");
		throw new DogBarkException("you throw stone I bark at you....");
	}
}
class Biscuit extends Item{
	public Biscuit() {
		// TODO Auto-generated constructor stub
	}
	@Override
	void executeItem()throws DogExceptions {
		System.out.println("dog eating the biscuit....");
		throw new DogHappyException("I love biscuits......");
	}
}
abstract class Animal{
	abstract void play(Item item)throws DogExceptions;
}
class Dog extends Animal{
	@Override
	void play(Item item)throws DogExceptions {
		item.executeItem();
	}
}


haarisinfotech
  11:06 AM
package oops;
import java.lang.reflect.Method;
public class IntrosDemo3 {
	public static void main(String[] args)throws Exception {
		IntrosTest2 obj=new IntrosTest2();
		
		Class c=obj.getClass();
		
		//rahul gandhi code
		Method m=c.getDeclaredMethod("met",String.class,int.class);
		m.setAccessible(true);
		m.invoke(obj,"hello",10);
		
		//gandhi code
		m=c.getDeclaredMethod("met",new Class[] {String.class,int.class});
		m.setAccessible(true);
		m.invoke(obj,new Object[]{"hello",10});
	}
}
class IntrosTest2{
	public IntrosTest2() {
		// TODO Auto-generated constructor stub
	}
	public void met() {
		System.out.println("met called...empty");
	}
	private void met(String s,int i) {
		System.out.println(s+":"+i);
	}
}


haarisinfotech
  11:21 AM
package oops;
import java.util.Scanner;
public class Assignment {
	public static void main(String[] args) {
		Scanner scan=new Scanner(System.in);
		Disease corona=new Corona();
		System.out.println("Please enter the property name...:");
		System.out.println("property names are..:name,infectious,c,s");
		String p=scan.nextLine();
		
	}
}
class Disease{
	public String name="infectious";
	public boolean infectious=true;
	String c="a";
	boolean s=false;
}
class Corona extends Disease{
	public String getName() {
		return this.name;
	}
	public boolean isInfectious() {
		return infectious;
	}
	String getC() {
		return this.c;
	}
	boolean isS() {
		return this.s;
	}
}


haarisinfotech
  1:11 PM
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
/**
 * if the getter method we are looking is not found in the class, then it recursively with the super classes for the method and it break at object class or if the method is found.
The syntax for a getter method name is as follows
1. the method name begins with a lowercase letter
2. convert the first character for the property name to upper case
3. if the return type is a primitive typed boolean, then the method starts with "is"
4. if the return type is not a primitive typed boolean, then the method starts with "get"
 *
 */
public class ReflectionUtils {
    public static <D> Object callGetterForProperty(D instance, String propertyName) {
    	Class<?> currentClass=null;
    	try {
    	if(instance!=null) {
    		currentClass = instance.getClass();    		
    	}
    	else {
			throw new NoSuchFieldException("The supplied property is invalid...");
		}
    	if (currentClass == Object.class) {
    			throw new NoSuchFieldException("The supplied property is invalid...");
    		}  	      
        return callGetterRecursively(instance, propertyName, currentClass);
        } catch (NoSuchFieldException | NoSuchMethodException e) {
            System.out.println("The supplied property is invalid...");
            return null;
        }
    }
    private static <D> Object callGetterRecursively(D instance, String propertyName, Class<?> currentClass) throws NoSuchMethodException {
        if (currentClass == null || currentClass == Object.class) {
            // Base case: If we have reached Object class, the getter method was not found, throws exception
            throw new NoSuchMethodException("The supplied property is invalid...");
        }
        try {
            // Get the getter method for the property
            Method getter = currentClass.getDeclaredMethod(getGetterMethodName(propertyName,currentClass));
            // If getter method is found, invoke it on the instance to get the property value
            if (getter != null) {
                return getter.invoke(instance);
            }
        } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException | NoSuchFieldException e) {
            // Handle any exceptions that may occur during reflection
            System.out.println("The supplied property is invalid...");
            //e.printStackTrace();
        }
        // Move up to the superclass and continue the search recursively
        return callGetterRecursively(instance, propertyName, currentClass.getSuperclass());
    }
    // Helper method to construct the getter method name from the property name
    private static String getGetterMethodName(String propertyName,Class currentClazz)throws NoSuchFieldException {
    	
        char firstChar = Character.toUpperCase(propertyName.charAt(0));
        Field field=currentClazz.getDeclaredField(propertyName);
        Type type= field.getType();
        if(type.getTypeName().equals("boolean")) {
        	if (propertyName.length() == 1) {
                return "is" + firstChar;
            }
        	return "is" + firstChar + propertyName.substring(1);
        }
        if (propertyName.length() == 1) {
            return "get" + firstChar;
        }
        return "get" + firstChar + propertyName.substring(1);
    }
}
1:11
package edu.disease.finalproj;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import org.junit.Assert;
import org.junit.Test;
public class ReflectionUtilsTest {
    @Test
    public void testCallGetterForProperty() {
    	SampleClass sc=new SC("ramu");
        // Redirect standard output to capture the printed stack trace
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PrintStream originalOut = System.out;
        System.setOut(new PrintStream(outputStream));
        // Call the met method
        ReflectionUtils.callGetterForProperty(sc, "firstname");
        // Restore the standard output
        System.setOut(originalOut);
        // Get the captured stack trace as a string
        String printedStackTrace = outputStream.toString().trim();
        // Verify that the stack trace contains the exception message
        // You can customize this assertion based on your expected output
        // For example, you can check for specific keywords in the stack trace
        // or compare it with an expected stack trace string.
        assertEquals("The supplied property is invalid...",printedStackTrace.substring(0,35));
    }
    @Test
    public void testCallGetterForProperty6() {
    	// Redirect standard output to capture the printed stack trace
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PrintStream originalOut = System.out;
        System.setOut(new PrintStream(outputStream));
        // Call the met method
        ReflectionUtils.callGetterForProperty(null, "firstname");
        // Restore the standard output
        System.setOut(originalOut);
        // Get the captured stack trace as a string
        String printedStackTrace = outputStream.toString().trim();
        // Verify that the stack trace contains the exception message
        // You can customize this assertion based on your expected output
        // For example, you can check for specific keywords in the stack trace
        // or compare it with an expected stack trace string.
        assertEquals("The supplied property is invalid...",printedStackTrace.substring(0,35));
    }
    @Test
    public void testCallGetterForProperty7() {
    	// Redirect standard output to capture the printed stack trace
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PrintStream originalOut = System.out;
        System.setOut(new PrintStream(outputStream));
        // Call the met method
        ReflectionUtils.callGetterForProperty(new Object(), "firstname");
        // Restore the standard output
        System.setOut(originalOut);
        // Get the captured stack trace as a string
        String printedStackTrace = outputStream.toString().trim();
        // Verify that the stack trace contains the exception message
        // You can customize this assertion based on your expected output
        // For example, you can check for specific keywords in the stack trace
        // or compare it with an expected stack trace string.
        assertEquals("The supplied property is invalid...",printedStackTrace.substring(0,35));
    }
   	 @Test
  	    public void testCallGetterForProperty2() {
    	        // Sample class with a property "name"
    	        SampleClass sample = new SC("ramu");
    	        // Call the callGetterForProperty method to get the value of the "name" property
    	        Object value = ReflectionUtils.callGetterForProperty(sample, "name");
    	        // Assert that the value is "ramu"
    	        Assert.assertEquals("ramu", value);  	       
 	    }
   	 @Test
	    public void testCallGetterForProperty5() {
 	        // Sample class with a property "name"
 	        SampleClass sample = new SC("ramu");
 	        // Call the callGetterForProperty method to get the value of the "name" property
 	        Object value = ReflectionUtils.callGetterForProperty(sample, "f");
 	        // Assert that the value is "somu"
 	        Assert.assertEquals("somu", value);  	       
	    }
   	 @Test
	    public void testCallGetterForProperty3() {
 	        // Sample class with a property "name"
 	        SampleClass sample = new SC("ramu");
 	        // Call the callGetterForProperty method to get the value of the "name" property
 	        Object value = ReflectionUtils.callGetterForProperty(sample, "available");
 	        // Assert that the value is "false"
 	        Assert.assertFalse((boolean)value);  	       
	    }
   	 @Test
	    public void testCallGetterForProperty4() {
	        // Sample class with a property "name"
	        SampleClass sample = new SC("ramu");
	        // Call the callGetterForProperty method to get the value of the "name" property
	        Object value = ReflectionUtils.callGetterForProperty(sample, "s");
	        // Assert that the value is "false"
	        Assert.assertFalse((boolean)value);  	       
	    }
	
}
class SampleClass {
private String name;
private boolean available;
private String f="somu";
private boolean s;
/**
 * @return the f
 */
public String getF() {
	return f;
}
/**
 * @param f the f to set
 */
public void setF(String f) {
	this.f = f;
}
/**
 * @return the s
 */
public boolean isS() {
	return s;
}
/**
 * @param s the s to set
 */
public void setS(boolean s) {
	this.s = s;
}
/**
* @return the available
*/
public boolean isAvailable() {
	return available;
}
/**
* @param available the available to set
*/
public void setAvailable(boolean available) {
	this.available = available;
}
public SampleClass() {
// TODO Auto-generated constructor stub
}
public SampleClass(String name) {
  this.name = name;
}
// Getter method for the "name" property
public String getName() {
  return name;
}
public void setName(String name) {
	this.name=name;
}
}
class SC extends SampleClass{
public SC(String name) {
	super(name);
}
}
1:15
PDF
 

NPTEL-ASSIGNMENT-JAVA.pdf
PDF


haarisinfotech
  11:08 AM
package threadpack;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
public class ClassLockDemo {
	public static void main(String[] args) {
		CinemaHall s1=new CinemaHall();
		CinemaHall s2=new CinemaHall();
		ExecutorService es=Executors.newFixedThreadPool(2);
		es.execute(new Runnable() {			
			@Override
			public void run() {
				synchronized(Toilet.class) {//class lock
				Thread.currentThread().setName("kamal");
				CinemaHall.toilet.useToilet();
				}
			}
		});
		es.execute(new Runnable() {			
			@Override
			public void run() {
				synchronized(Toilet.class) {
				Thread.currentThread().setName("rajini");
				CinemaHall.toilet.useToilet();
				}
			}
		});
		es.shutdown();
	}
}
class CinemaHall{
	static Toilet toilet=new Toilet();//class variable
	public CinemaHall() {
		System.out.println("cinema hall object created...");
	}
}
class Toilet{
	public Toilet() {
		System.out.println("toilet object created...");
	}
 public void useToilet() {
		Thread t=Thread.currentThread();
		String name=t.getName();
		System.out.println(name+" is using the toilet...");
		try {Thread.sleep(2000);}catch(Exception e) {}
		System.out.println(name+" is comming out of toilet...");
	}
}


haarisinfotech
  12:02 PM
package threadpack;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
public class ObjectLock {
	public static void main(String[] args) {
		ReservationCounter central=new ReservationCounter();
		ExecutorService es=Executors.newFixedThreadPool(2);
		es.execute(new Runnable() {			
			@Override
			public void run() {
				synchronized (central) {							
				Thread.currentThread().setName("kamal");
				central.bookTicket(1000);				
				central.giveChange();
				}
			}
		});
		es.execute(new Runnable() {			
			@Override
			public void run() {
				synchronized(central) {
				Thread.currentThread().setName("rajini");
				central.bookTicket(500);			
				central.giveChange();
				}
			}
		});
		es.shutdown();
	}
}
class ReservationCounter{
	int amt;
	public void bookTicket(int amt) {
		String name=Thread.currentThread().getName();
		this.amt=amt;
		System.out.println(name+" is booking the ticket...");
	}
	public void giveChange() {
		String name=Thread.currentThread().getName();
		amt=amt-100;
		System.out.println("The Change.."+amt+" is given to.."+name);
	}
}


haarisinfotech
  12:59 PM
package threadpack;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
public class MethodLockDemo {
	public static void main(String[] args) {
		CounsellingHall annahall=new CounsellingHall();
		ExecutorService es=Executors.newFixedThreadPool(3);
		es.execute(new Runnable() {			
			@Override
			public void run() {										
				Thread.currentThread().setName("kamal");
				annahall.table1();
				annahall.table2();
				annahall.table3();
			}
		});
		es.execute(new Runnable() {			
			@Override
			public void run() {			
				Thread.currentThread().setName("rajini");				
				annahall.table1();
				annahall.table2();
				annahall.table3();
				}			
		});
		es.execute(new Runnable() {
			@Override
			public void run() {
				Thread.currentThread().setName("gokul");
				annahall.sideDish();
				annahall.sideDish();
			}
		});
		es.shutdown();
	}
}
class CounsellingHall{
	 synchronized public void table1() {
		String name=Thread.currentThread().getName();
		System.out.println(name+" is in table1....");
		try {Thread.sleep(2000);}catch(Exception e) {}
		System.out.println(name+" is out of table 1...");
	}
	 synchronized  public void table2() {
		String name=Thread.currentThread().getName();
		System.out.println(name+" is in table2....");
		try {Thread.sleep(1500);}catch(Exception e) {}
		System.out.println(name+" is out of table 2...");
	}
	 synchronized  public void table3() {
		String name=Thread.currentThread().getName();
		System.out.println(name+" is in table3....");
		try {Thread.sleep(1000);}catch(Exception e) {}
		System.out.println(name+" is out of table 3...");
	}
	public void sideDish() {
		String name=Thread.currentThread().getName();
		System.out.println(name+" is in food area....");
		try {Thread.sleep(500);}catch(Exception e) {}
		System.out.println(name+" is out of food area...");
	}
}
:raised_hands:
1
:100:
1



haarisinfotech
  9:33 AM
Excel Spreadsheet
 

Freshers Program - Java Stream-VASTPRO_srini_updates.xls
Excel Spreadsheet


haarisinfotech
  11:31 AM
package oops;
import java.lang.reflect.Field;
public class FactoryPattern {
	public static void main(String[] args)throws Exception {
		ShoeShop seller=Container.getShoeShop();
		//"oops.LakhaniShoeFactory","oops.RamuShoeShop");		
		Customer customer=new Customer();
		customer.name="ramu";
		Shoe shoe=seller.sell(customer);
		System.out.println(shoe);		
	}
}
class Container{
	public static ShoeShop getShoeShop()throws Exception {
		ShoeShop seller=new RamuShoeShop();
				//Class.forName(shopclassname).getConstructor().newInstance();		
		Class c=seller.getClass();
		Class pclass=c.getSuperclass();
		Field field=pclass.getDeclaredField("factory");
		field.setAccessible(true);
		
		In in=field.getAnnotation(In.class);
		ShoeFactory factory=null;
		if(in!=null) {
			String factoryclassname=in.factoryName();
			factory=(ShoeFactory)
			Class.forName(factoryclassname).getConstructor().newInstance();
		}		
		
		//dependency injection
		
		seller.setFactory(factory);
		
		return seller;
	}
}
abstract class Shoe{
	
}
class SportsShoe extends Shoe{}
class LeatherShoe extends Shoe{}
interface Manufacturer{
	public Shoe make();
}
interface ShoeManufacturer extends Manufacturer{
	default public Shoe make() {
		return makeShoe();
	}
	public Shoe makeShoe();
}
interface Seller{
	public Shoe sell(Customer customer);
}
interface ShoeSeller extends Seller{
	default public Shoe sell(Customer customer) {
		return sellShoe(customer);
	}
	public Shoe sellShoe(Customer customer);
}
class Customer{
	String name;
}
abstract class ShoeFactory implements ShoeManufacturer{
	public ShoeFactory() {
		// TODO Auto-generated constructor stub
	}
}
class BataShoeFactory extends ShoeFactory{
	public BataShoeFactory() {
		// TODO Auto-generated constructor stub
	}
	@Override
	public Shoe makeShoe() {
		return new LeatherShoe();
	}
}
class LakhaniShoeFactory extends ShoeFactory{
	public LakhaniShoeFactory() {
		// TODO Auto-generated constructor stub
	}
	@Override
	public Shoe makeShoe() {
		return new SportsShoe();
	}
}
abstract class ShoeShop implements ShoeSeller{
	public ShoeShop() {
		// TODO Auto-generated constructor stub
	}
	@In(factoryName = "oops.LakhaniShoeFactory")
	private ShoeFactory factory;
	public void setFactory(ShoeFactory factory) {
		this.factory=factory;
	}
	public ShoeFactory getFactory() {
		return this.factory;
	}
}
class RamuShoeShop extends ShoeShop{
	public RamuShoeShop() {
		// TODO Auto-generated constructor stub
	}
	@Override
	public Shoe sellShoe(Customer customer) {
		// TODO Auto-generated method stub
		return getFactory().makeShoe();
	}
}
11:31
package oops;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
@Retention(RetentionPolicy.RUNTIME)
public @interface In {
	String factoryName();
}


haarisinfotech
  12:34 PM
package oops;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.reflect.Method;
public class AnnoDemo {
	public static void main(String[] args)throws Exception {
		//I am creating Bank object for Corporation Bank
		//CB pays me Rs. 1000 for developing software
		Banking cbbanking=BankingContainer.createBankingObject();
		cbbanking.credit();
		cbbanking.debit();
		//HDFC pays me Rs. 10,000/- for developing software
		//american bank - 100000/-
		
		
	}
}
class BankingContainer{
	public static Banking createBankingObject()throws Exception {
		Banking obj=new Banking();
		Class c=obj.getClass();
		Method m=c.getDeclaredMethod("credit");
		m.setAccessible(true);
		Transactions tr=(Transactions)m.getAnnotation(Transactions.class);
		String transactionname=tr.transactionname();
		if(tr!=null) {
			if(transactionname.equals("oops.MyBumperTransaction")) {
				obj.setTr(new MyBumperTransaction());
			}
			else if(transactionname.equals("oops.MySuperTransaction")) {
				obj.setTr(new MySuperTransaction());
			}
			else {
				obj.setTr(new MyTransaction());
			}
			
		}
		Securities sc=(Securities)m.getAnnotation(Securities.class);
		if(sc!=null) {
			obj.setSc(new MySecurity());
		}
		return obj;
	}
}
class Banking{
	MyTransaction tr;
	public void setTr(MyTransaction tr) {
		this.tr=tr;
	}
	MySecurity sc;
	public void setSc(MySecurity sc) {
		this.sc=sc;
	}
	@Transactions(transactionname = "oops.MySuperTransaction")
	@Securities
	public void credit() {
		System.out.println("credit happened....");
		if(tr!=null) {
			tr.handleTransaction();
		}
		if(sc!=null) {
			sc.handleSecurity();
		}
	}
	
	public void debit() {
		System.out.println("debit happened....");
	}
}
class MyTransaction{
	public void handleTransaction() {
		System.out.println("Transactions handled....");
	}
}
class MySuperTransaction extends MyTransaction{
	public void handleTransaction() {
		System.out.println("extra rich feature transaction......");
	}
}
class MyBumperTransaction extends MyTransaction{
	public void handleTransaction() {
		System.out.println("bumper offer transaction...........");
	}
}
class MySecurity{
	public void handleSecurity() {
		System.out.println("security handled.....");
	}
}
@Retention(RetentionPolicy.RUNTIME)
@interface Transactions{
	String transactionname();
}
@Retention(RetentionPolicy.RUNTIME)
@interface Securities{
	
}


haarisinfotech
  11:24 AM
package oops;
public class LambdaDemo {
	public static void main(String[] args) {
		//Gandhi Way
		MyInterL myinter=new MyInterImpl();
		myinter.met();
		
		//RajivGandhi Way
		new MyInterL() {			
			@Override
			public void met() {
				System.out.println("rajiv gandhi way...");
			}
		}.met();
		
		//Priyanka Gandhi Way - Vadhra - Method Refrencing...
		MyInterL myinter2=LambdaDemo::vadhraMet;
		myinter2.met();
		
		myinter2=new LambdaDemo()::vadhraMetNonStatic;
		myinter2.met();
		
		int x[]= {10,20,30,40};
		MyPrint myprint=LambdaDemo::print;
		for(int a:x) {
			myprint.print(a);
		}
		
		//Rahul Gandhi Way - - Lambda Way
		
		MyInterL myinterlambda=()->{System.out.println("my way seperate way....");};
		myinterlambda.met();
		myprint=(int i)->{System.out.println(i);};
		for(int a:x) {
			myprint.print(a);
		}
		
		MyInterL2 m=(String s,int i)->{return "welcome..."+s+":"+i;};
		System.out.println(m.sayHello("vaspro", 10));
		
		m=(s,i)->{return "welcome..."+s+":"+i;};
		System.out.println(m.sayHello("vaspro", 10));
	}
	public static void vadhraMet() {
		System.out.println("vadhra met way............");
	}
	public void vadhraMetNonStatic() {
		System.out.println("vadhra non static met way............");
	}
	public static void print(int i) {
		System.out.println("Value..:"+i);
	}
}
//Gandhi Way
class MyInterImpl implements MyInterL{
	@Override
	public void met() {
		System.out.println("gandhi met called...");
	}
}
interface MyInterL{
	public void met();
}
interface MyPrint{
	public void print(int i);
}
interface MyInterL2{
	public String sayHello(String name,int age);
}
11:25
package oops;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
public class AnnoDemo2 {
	public static void main(String[] args) {
		AnnoSam obj=new AnnoSam();
		Class c=obj.getClass();
		MyAnno myan=(MyAnno)c.getAnnotation(MyAnno.class);
		System.out.println(myan.name());
	}
}
@Retention(RetentionPolicy.RUNTIME)
@interface MyAnno{
	String name() default "hello";
}
class AnnoSam{
	@MyAnno(name="this is not default")
	String s;
}


haarisinfotech
  1:26 PM
package basics;
public class OpenCloseDemo {
	public static void main(String[] args) {
		GoodPaintBrush gp=new GoodPaintBrush();
		gp.doPaint(new BluePaint());
		
		RealGoodBrush<Pastry> rb=PastryContainer.getPastryBrush();
		Pastry p=rb.getT();
		p.paste();
		
		RealGoodBrush<Paint> rb2=PaintContainer.getPaintBrush();
		Paint paint=rb2.getT();
		System.out.println(paint);
	}
}
class BadPaintBrush{
	public void doPaint(int i) {
		if(i==1) {
			System.out.println("red paint.....");
		}
		else if(i==2) {
			System.out.println("blue paint....");
		}
	}
}
class GoodPaintBrush{
	public void doPaint(Paint p) {
		p.color();
	}
}
class GoodGoodBrush{
	public void doPaint(Object obj) {
		Water w=(Water)obj;
		w.doSprinkle();
	}
}
class PaintContainer{
	public static RealGoodBrush<Paint> getPaintBrush(){
		RealGoodBrush<Paint> rb=new RealGoodBrush<>();
		rb.setT(new RedPaint());
		return rb;
	}
}
class PastryContainer{
	public static RealGoodBrush<Pastry> getPastryBrush(){
		RealGoodBrush<Pastry> rb=new RealGoodBrush<>();
		rb.setT(new Pastry());
		return rb;
	}
}
class Pastry{
	public void paste() {
		System.out.println("pastry job done...");
	}
}
class RealGoodBrush<T>{
	T obj;
	public void setT(T obj) {
		this.obj=obj;
	}
	public T getT() {
		return this.obj;
	}
}
class Water{
	public void doSprinkle() {
		
	}
}
abstract class Paint{
	public abstract void color();
}
class RedPaint extends Paint{
	@Override
	public void color() {
		System.out.println("red colour...");
	}
}
class BluePaint extends Paint{
	@Override
	public void color() {
		System.out.println("blue colour....");
	}
}
/*
 * Trick to remove if-else-if conditions
 * 1. Convert the condition to classes
 * 2. Place them under a hierarchy
 * 3. Create a association between the hierarchial class and the using class
 */


haarisinfotech
  11:31 AM
package iopack;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
public class IODemo1 {
	public static void main(String[] args) throws Exception{
		File file=new File("abc.txt");
		String s=file.exists()?"file exist":"file does not exist";
		System.out.println(s);
		//FileInputStream fis=new FileInputStream("abc.txt");
		FileInputStream fis=new FileInputStream(file);
		FileOutputStream fos=new FileOutputStream("copy.txt");
		System.out.println(fis.available());//will tell the size of the contents in file
		
//		System.out.println((char)fis.read());
//		System.out.println((char)fis.read());
//		System.out.println((char)fis.read());
//		System.out.println(fis.read());
//		//System.out.println((char)fis.read());
//		String str=new String(b);
//		System.out.println(str);
		byte b[]=new byte[8];
		int noofcharread=0;
		while((noofcharread=fis.read(b))!=-1) {
			
			String str=new String(b,0,noofcharread);
			System.out.println(str);
			
			fos.write(b, 0, noofcharread);
			
		}
		
		
	}
}
:eyes:
1

11:31
package iopack;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
public class IODemo2 {
	public static void main(String[] args) throws Exception{
		File file=new File("abc.txt");
		String s=file.exists()?"file exist":"file does not exist";
		System.out.println(s);
		//FileInputStream fis=new FileInputStream("abc.txt");
		FileReader fis=new FileReader(file);
		FileWriter fos=new FileWriter("copy.txt");
				
//		System.out.println((char)fis.read());
//		System.out.println((char)fis.read());
//		System.out.println((char)fis.read());
//		System.out.println(fis.read());
//		//System.out.println((char)fis.read());
//		String str=new String(b);
//		System.out.println(str);
		char b[]=new char[8];
		int noofcharread=0;
		while((noofcharread=fis.read(b))!=-1) {
			
			String str=new String(b,0,noofcharread);
			System.out.println(str);
			
			fos.write(b, 0, noofcharread);
			
		}
		//fos.close();
		
	}
}
:white_check_mark:
1

11:31
package iopack;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
public class IODemo3 {
	public static void main(String[] args){
		File file=new File("abc.txt");
		String s=file.exists()?"file exist":"file does not exist";
		System.out.println(s);
		//FileInputStream fis=new FileInputStream("abc.txt");
		//TRY WITH RESOURCES
		
		//FileWriter fos=null;
		try(FileReader fis=new FileReader("abc.txt");
				FileWriter fos=new FileWriter("copy.txt");	)
		{				
		char b[]=new char[8];
		int noofcharread=0;
		while((noofcharread=fis.read(b))!=-1) {
			
			String str=new String(b,0,noofcharread);
			System.out.println(str);
			
			fos.write(b, 0, noofcharread);			
		}
	
		
	}catch(Exception e) {
		e.printStackTrace();
	}
	}
}


haarisinfotech
  10:12 AM
package iopack;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
public class ObjectDemo {
	public static void main(String[] args) throws Exception{
		Laddu laddu=new Laddu();
		System.out.println("size of laddu...:"+laddu.size);
		System.out.println("gadothgajan serializes the laddu before eating....");
		FileOutputStream fos=new FileOutputStream("myladdu.dat");
		ObjectOutputStream oos=new ObjectOutputStream(fos);
		oos.writeObject(laddu);//saves the laddu in serialized form (in a file)....
		
		System.out.println("gadothgajan eats the laddu.....");
		laddu.size=0;
		System.out.println("You see....laddus..."+laddu.size);
		
		FileInputStream fis=new FileInputStream("myladdu.dat");
		ObjectInputStream ois=new ObjectInputStream(fis);
		
		System.out.println("jee boomba......laddu come back.....");
		Laddu laddu2=(Laddu)ois.readObject();
		System.out.println("You see laddus.....:"+laddu2.size);
		
		
	}
}
class Laddu implements Serializable{
	int size=10;
}


haarisinfotech
  10:27 AM
package iopack;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.InputStreamReader;
public class BufferDemo {
	public static void main(String[] args)throws Exception {
		String str="jack and &copy; jill went up &copy; the &copy hill to fetch a .....";
		
		ByteArrayInputStream bis=new ByteArrayInputStream(str.getBytes());
		BufferedReader br=new BufferedReader(new InputStreamReader(bis));
		
		int i=0;
		char c=0;
		boolean marked=false;
		while((i=br.read())!=-1) {
			c=(char)i;
			switch(c){
			case '&':{
				br.mark(50);
				marked=true;
				break;
			}
			case ';':{
				if(marked) {
					System.out.print((char)169);
					marked=false;
				}
				break;
			}
			case ' ':{
				if(marked) {
					br.reset();
					System.out.print("&");
					marked=false;
				}else {
					System.out.print(" ");
				}
				break;
			}
			default:{
				if(!marked) {
					System.out.print(c);
				}
			}
			}
		}
	}
}


haarisinfotech
  10:57 AM
package iopack;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.net.Inet6Address;
import java.net.InetAddress;
import java.net.URL;
import java.net.URLConnection;
public class NetDemo {
	public static void main(String[] args)throws Exception {
		InetAddress inet=Inet6Address.getLocalHost();
		
		System.out.println(inet);
		
		inet=Inet6Address.getByName("www.haarisinfotech.com");
		System.out.println(inet);
		
		inet=Inet6Address.getByName("www.docs.google.com");
		System.out.println(inet);
		
		InetAddress inetall[]=Inet6Address.getAllByName("www.openai.com");
		for(InetAddress i:inetall) {
			System.out.println(i);
		}
		
		URL url=new URL("http://142.251.12.189/index.html");
		URLConnection urlcon=url.openConnection();
		
		BufferedReader br=new BufferedReader(new InputStreamReader(urlcon.getInputStream()));
		FileWriter fos=new FileWriter("google.html");
		int i=0;
		char c[]=new char[256];
	
		while((i=br.read(c))!=-1) {
			String str=new String(c,0,i);
			System.out.print(str);
			fos.write(c,0,i);
		}
		br.close();
		fos.close();
	}
}
google.comgoogle.com
Google
Search the world's information, including webpages, images, videos and more. Google has many special features to help you find exactly what you're looking for.


haarisinfotech
  12:27 PM
package iopack;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.Socket;
class Client{
	Socket s;BufferedReader in,keyin;PrintStream out;
	public Client() {
		try {
			while(true) {
		s=new Socket("localhost",2000);
		in=new BufferedReader(new InputStreamReader(s.getInputStream()));
		String msgFromServer=in.readLine();
		System.out.println("Msg From Server...:"+msgFromServer);
		out=new PrintStream(s.getOutputStream());
		keyin=new BufferedReader(new InputStreamReader(System.in));
		System.out.println("Enter message for server...:");
		String msg=keyin.readLine();
		out.println(msg);
			}
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	public static void main(String[] args) {
		new Client();
	}
}
12:27
package iopack;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;
class Server{
	ServerSocket ss;Socket s;PrintStream out;BufferedReader in,keyin;
	public Server() {
		try {
			ss=new ServerSocket(2000);
			while(true) {
				System.out.println("Server running....");
				s=ss.accept();
				out=new PrintStream(s.getOutputStream());
				keyin=new BufferedReader(new InputStreamReader(System.in));
				System.out.println("Enter message for client...:");
				String msg=keyin.readLine();
				out.println(msg);
				in=new BufferedReader(new InputStreamReader(s.getInputStream()));
				String msgFromClient=in.readLine();
				System.out.println("Msg From Client..:"+msgFromClient);
				//System.out.println(s);
			}
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	public static void main(String[] args) {
		new Server();
	}
}


haarisinfotech
  11:06 AM
package colpack;
public class UtilDemo1 {
	public static void main(String[] args) {
		//GANDHI WAY
		final int num[]= {10,20,30,40,50};
		System.out.println(num[2]);
		//INDRA GANDHI WAY
		System.out.println(MyCons.num1);
		//RAHUL GANDHI WAY
		System.out.println(MyConsEnum.num1.getI());
		
		
		switch(MyConsEnum.num1.getI()) {
		case 10:{
			
		}
		case 20:{
			
		}
		}
		
		Fruits f=Fruits.apple;
		switch(f) {
		case apple:{
			
		}
		case banana:{
			
		}
		case jack:{
			
		}
		}
		
		Fruits ff[]=Fruits.values();
		for(Fruits x:ff) {
			System.out.println(x);
		}
		System.out.println(Fruits.valueOf("apple"));
	}
}
enum Fruits{
	apple,jack,banana;
}
interface MyCons{
	public final static int num1=10;
	public final static int num2=20;
	public final static int num3=20;
}
enum MyConsEnum{	
	num1(10),num2(20),num3(30);
	int i;
	MyConsEnum(int i){
		this.i=i;
	}
	public int getI() {
		return this.i;
	}
}


haarisinfotech
  11:26 AM
package colpack;
import java.util.Scanner;
public class UtilDemo2 {
	public static void main(String[] args) {
		Scanner scan=new Scanner(System.in);
		System.out.println("Please tell your role name...:");
		String myrole=scan.nextLine();
		System.out.println("Give your password...");
		String pwd=scan.nextLine();
		UserRoles role=UserRoles.valueOf(myrole);
		role=PermissionApp.checkPermission(role,pwd);
		switch(role.permission) {
		case 1:{
			System.out.println("Permission granted...");
			break;
		}
		case 0:{
			System.out.println("Permission Denied....");
		}
		}
	}
}
class PermissionApp{
	public static UserRoles checkPermission(UserRoles role,String pwd) {
		switch(role) {
		case admin:{
			String p=role.getValue();
			if(p.equals(pwd)) {
				role.setPermission(1);
				return role;
			}
			else {
				return role;
			}
			
		}
		case devops:{
			String p=role.getValue();
			if(p.equals(pwd)) {
				role.setPermission(1);
				return role;
			}
			else {
				return role;
			}
		}
		default:{
			 role.setPermission(0);
			 return role;
		}
		}
	}
}
enum UserRoles{
	admin("admin"),devops("secret"),developer("superman"),tester("spiderman"),accounts("shazam"),hr("shakthiman");
	
	String value;
	UserRoles(String value){
		this.value=value;
	}
	public String getValue() {
		return this.value;
	}
	int permission=0;
	public void setPermission(int i) {
		permission=i;
	}
}


haarisinfotech
  11:33 AM
package colpack;
import java.util.Scanner;
/*
 * 1. How to create a enum
 * 2. How to accept a enum from keyboard
 * 3. How to associate values to a enum (both getting and setting)
 * 4. How to write a custom method in enum
 * 5. How to declare enum as a parameter type in a method
 * 6. How to get enum as return type
 * 7. How to use enum in switch case.
 * 8. How to use the valueOf and values method in enum.
 */
public class UtilDemo2 {
	public static void main(String[] args) {
		Scanner scan=new Scanner(System.in);
		System.out.println("Please tell your role name...:");
		String myrole=scan.nextLine();
		System.out.println("Give your password...");
		String pwd=scan.nextLine();
		UserRoles role=UserRoles.valueOf(myrole);
		role=PermissionApp.checkPermission(role,pwd);
		switch(role.permission) {
		case 1:{
			System.out.println("Permission granted...");
			break;
		}
		case 0:{
			System.out.println("Permission Denied....");
		}
		}
	}
}
class PermissionApp{
	public static UserRoles checkPermission(UserRoles role,String pwd) {
		switch(role) {
		case admin:{
			String p=role.getValue();
			if(p.equals(pwd)) {
				role.setPermission(1);
				return role;
			}
			else {
				return role;
			}
			
		}
		case devops:{
			String p=role.getValue();
			if(p.equals(pwd)) {
				role.setPermission(1);
				return role;
			}
			else {
				return role;
			}
		}
		default:{
			 role.setPermission(0);
			 return role;
		}
		}
	}
}
enum UserRoles{
	admin("admin"),devops("secret"),developer("superman"),tester("spiderman"),accounts("shazam"),hr("shakthiman");
	
	String value;
	UserRoles(String value){
		this.value=value;
	}
	public String getValue() {
		return this.value;
	}
	int permission=0;
	public void setPermission(int i) {
		permission=i;
	}
}


haarisinfotech
  12:43 PM
package colpack;
import java.io.FileReader;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
public class UtilDemo4 {
	public static void main(String[] args) {
		ExecutorService es=Executors.newFixedThreadPool(2);
		es.execute(()->{
			Connection c=ConnectionUtility.getConnection();
			c=ConnectionUtility.getConnection();
			ConnectionUtility.closeConnection();
			c=ConnectionUtility.getConnection();
		});
		es.execute(()->{
			//Connection c=ConnectionUtility.getConnection();
			System.out.println(ConnectionUtility.getConnection());
			
		});
		es.shutdown();
	}
}
//To give unique connection for every user...
class ConnectionUtility{
	private static ThreadLocal<Connection> tlocal=new ThreadLocal<Connection>();
	public static Connection getConnection() {
		Connection c=tlocal.get();
		if(c!=null) {
			return c;
		}
		else {
			Connection con=new Connection();
			tlocal.set(con);
			return c;
		}
	}
	public static void closeConnection() {
		Connection c=tlocal.get();
		if(c!=null) {
			tlocal.remove();
		}
	}
}
class Connection{
	public Connection() {
		System.out.println("connection created....");
	}
	public FileReader getFileConnection() throws Exception{
		FileReader fir=new FileReader("abc.txt");
		return fir;
	}
}
12:43
package colpack;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
public class UtilDemo3 {
	public static void main(String[] args) {
		ExecutorService es=Executors.newFixedThreadPool(2);
		
		es.execute(()->{
			Thread.currentThread().setName("ramuramu");
			Suitcase s=new Suitcase("adidas");
			System.out.println("suitacase set..:"+s+"of user..:"+Thread.currentThread().getName());
			ClockRoom.setLuggage(s);
			System.out.println(ClockRoom.getLuggage()+"of user..:"+Thread.currentThread().getName());
			ClockRoom.removeLuggage();
			try {Thread.sleep(5000);}catch(Exception e) {}
//			s=new Suitcase("newvip");
//			System.out.println("suitacase set..:"+s+"of user..:"+Thread.currentThread().getName());
//			ClockRoom.setLuggage(s);
			System.out.println(ClockRoom.getLuggage()+"of user..:"+Thread.currentThread().getName());
			
		});
		es.execute(()->{
			Thread.currentThread().setName("somusomu");
			Suitcase s=new Suitcase("vip");
			System.out.println("suitacase set..:"+s+"of user..:"+Thread.currentThread().getName());
			ClockRoom.setLuggage(s);
			System.out.println(ClockRoom.getLuggage()+"of user..:"+Thread.currentThread().getName());
		});
		
		es.shutdown();
	}
}
class ClockRoom{
	private static ThreadLocal<Suitcase> tlocal=new ThreadLocal<Suitcase>();
	
	public static Suitcase getLuggage() {
		Suitcase s=tlocal.get();
		if(s!=null) {
			return s;
		}
		else {
			return null;
		}
	}
	public static void setLuggage(Suitcase sc) {
		Suitcase s=tlocal.get();
		if(s==null) {
			tlocal.set(sc);
		}
		else {
			System.out.println("already set....");
		}
	}
	
	public static void removeLuggage() {
		Suitcase s=tlocal.get();
		if(s!=null) {
			tlocal.remove();
		}
	}
}
class Suitcase{
	String name;
	public Suitcase(String name) {
		this.name=name;
	}
	@Override
	public String toString() {
		return name+":suitcase";
	}
}


haarisinfotech
  1:00 PM
package colpack;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.function.Consumer;
public class UtilDemo5 {
	public static void main(String[] args) {
		List<String> mylist=new LinkedList<String>();
		
		mylist.add("a");
		mylist.add("b");
		mylist.add("c");
		
		System.out.println(mylist);
		
		mylist.add("d");
		
		System.out.println(mylist);
		
		System.out.println(mylist.get(0));
		System.out.println(mylist.remove(0));
		System.out.println(mylist.get(0));
		System.out.println(mylist);
		
		for(int i=0;i<mylist.size();i++) {
			System.out.println(mylist.get(i));
		}
		
		for(String s:mylist) {
			System.out.println(s);
		}
		
		//mylist.stream().forEach(new MyConsumer());
		//mylist.stream().forEach((s)->{System.out.println(s);});
		mylist.stream().forEach(UtilDemo5::myprint);
		
		Object o[]=mylist.stream().toArray();
		System.out.println(o);
		
		Iterator<String> iter=mylist.iterator();
		while(iter.hasNext()) {
			System.out.println(iter.next());
		}
		
		ListIterator<String> liter=mylist.listIterator();
		while(liter.hasNext()) {
			System.out.println(liter.next());
		}
		while(liter.hasPrevious()) {
			System.out.println(liter.previous());
		}
	}
	public static void myprint(String s) {
		System.out.println(s);
	}
}
class MyConsumer implements Consumer<String>{
	@Override
	public void accept(String t) {
		System.out.println(t);
	}
}


haarisinfotech
  1:40 PM
package colpack;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
public class UtilDemo6 {
	public static void main(String[] args) {
		List<String> mylist=new ArrayList<String>();
		
		mylist.add("zain");
		mylist.add("anand");
		mylist.add("bala");
		mylist.add("govind");
		
		System.out.println(mylist);
		
		Collections.sort(mylist,new MyComparator());
		
		System.out.println(mylist);
	}
}
class MyComparator implements Comparator<String>{
	@Override
	public int compare(String o1, String o2) {
		// TODO Auto-generated method stub
		return o2.compareTo(o1);
	}
}
1:40
package colpack;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
public class UtilDemo7 {
	public static void main(String[] args) {
		List<Employee> mylist=new ArrayList<Employee>();
		
		mylist.add(new Employee("zain"));
		mylist.add(new Employee("anand"));
		mylist.add(new Employee("kamal"));
		mylist.add(new Employee("ben"));
		System.out.println(mylist);
		//Collections.sort(mylist,new MyCom());
		Collections.sort(mylist,(Employee o1,Employee o2)-> o2.name.compareTo(o1.name));
		System.out.println(mylist);
	}
}
class MyCom implements Comparator<Employee>{
	@Override
	public int compare(Employee o1, Employee o2) {
		// TODO Auto-generated method stub
		return o2.name.compareTo(o1.name);
	}
}
class Employee implements Comparable<Employee>{
	String name;
	public Employee(String name) {
		this.name=name;
	}
	@Override
	public int compareTo(Employee o) {
		// TODO Auto-generated method stub
		return this.name.compareTo(o.name);
	}
	@Override
	public String toString() {
		return this.name;
	}
}
1:41
package iopack;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.Test;
public class CalcTest {
	
	@Test
	public void test1() {
		Calculator calc=new Calculator();
		int result=calc.div(10,2);
		assertEquals(5, result);
	}
	
	@Test(expected=ArithmeticException.class)
	public void test2() {
		Calculator calc=new Calculator();
		int result=calc.div(10,0);
	}
	
	@Test(expected=IllegalArgumentException.class)
	public void test3() {
		Calculator calc=new Calculator();
		int i=10;int j=0;
		int result=calc.div(i,j);		
	}
}


haarisinfotech
  10:39 AM
package colpack;
import java.util.Set;
import java.util.TreeSet;
public class UtilDemo9 {
	public static void main(String[] args) {
		Set<Student> ts=new TreeSet<Student>();
		
	
		ts.add(new Student("indra",50));
		ts.add(new Student("zain",40));
		ts.add(new Student("zaina",50));
		ts.add(new Student("india",20));
		
		System.out.println(ts);
	}
}
class Student implements Comparable<Student>{
	int marks;
	String name;
	public Student(String name,int marks) {
		this.name=name;
		this.marks=marks;
	}
	@Override
	public int compareTo(Student o) {
		// TODO Auto-generated method stub
		return 0;
	}
	@Override
	public String toString() {
		return this.name+":"+this.marks;
	}
}


haarisinfotech
  12:54 PM
import java.util.HashMap;
import java.util.Map;
import java.util.WeakHashMap;
public class UtilDemo11 {
	public static void main(String[] args) {
		Map<String, String> map=new WeakHashMap<String, String>();
		
		String k1=new String("key1");
		String k2=new String("key2");
		
		map.put(k1, "anand");
		map.put(k2, "zain");
		
		System.out.println(map);
		k1=null;
		System.gc();
		System.out.println(map);
	}
}


haarisinfotech
  8:41 PM
package colpack;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
public class UtilDemo8 {
	public static void main(String[] args) {
		Set<String> hs=new HashSet<>();
		hs.add("banana");
		hs.add("jack");
		hs.add("apple");
		hs.add("orange");
		
		System.out.println(hs);
		
		Iterator<String> iter=hs.iterator();
		
		while(iter.hasNext()) {
			System.out.println(iter.next());
		}
		
		hs.forEach(System.out::println);
		
		System.out.println(hs.contains("jack"));
		Object o[]=hs.toArray();
		for(Object oo:o) {
			System.out.println((String)oo);
		}
		System.out.println(hs.size());
		System.out.println(hs.remove("jack"));
		System.out.println(hs.size());
		hs.removeAll(hs);
		System.out.println(hs.size());
		
		
	}
}
8:41
package colpack;
import java.util.Set;
import java.util.TreeSet;
public class UtilDemo9 {
	public static void main(String[] args) {
		Set<Student> ts=new TreeSet<Student>();
		
	
		ts.add(new Student("india",50));
		ts.add(new Student("zain",40));
		ts.add(new Student("zain",50));
		ts.add(new Student("india",20));
		
		System.out.println(ts);
	}
}
class Student implements Comparable<Student>{
	int marks;
	String name;
	public Student(String name,int marks) {
		this.name=name;
		this.marks=marks;
	}
	@Override
	public int compareTo(Student o) {
		int nameComparison = o.name.compareTo(this.name); // Sort names in descending order
        if (nameComparison != 0) {
            return nameComparison;
        } else {
            return Integer.compare(this.marks, o.marks); // Sort marks in ascending order
        }
	}
	@Override
	public String toString() {
		return this.name+":"+this.marks;
	}
}
8:42
package colpack;
import java.lang.ref.SoftReference;
public class GCDemo {
	public static void main(String[] args) {
		Runtime r=Runtime.getRuntime();
		System.out.println("Before Birth of Tatha..:"+r.freeMemory());
		Tatha tatha=new Tatha();
		System.out.println("After Birth of Tatha...:"+r.freeMemory());
		SoftReference<Tatha> soft=new SoftReference<Tatha>(tatha);
		tatha=null;
		System.out.println(tatha);
		System.out.println("After Death of Tatha..:"+r.freeMemory());
		System.out.println("sadangu......for tatha....");
		r.gc();
		System.out.println("After sadangu of tatha...:"+r.freeMemory());
		tatha=soft.get();
		System.out.println(tatha.getGold());
		
	}
}
class Tatha{
	String age=new String("1");
	private String gold="under the banyan tree....";
	public Tatha() {
		for(int i=0;i<10000;i++) {
			age=new String(i+"... "+i);
		}
	}
	protected String getGold() {
		return this.gold;
	}
	@Override
	protected void finalize() throws Throwable {
		System.out.println(getGold());
	}
}
8:42
package colpack;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
public class UtilDemo10 {
	public static void main(String[] args) {
		Map<String,String> map=new HashMap<String, String>();
		
		map.put("b1", "anand");
		map.put("a1", "zain");
		map.put("z1", "badr");
		
		System.out.println(map);
		
		System.out.println(map.get("z1"));
		
		Set<Map.Entry<String, String>> set=map.entrySet();
		
		Iterator<Map.Entry<String,String>> iter=set.iterator();
		
		while(iter.hasNext()) {
			Map.Entry<String,String> me=iter.next();
			System.out.println(me.getKey()+":"+me.getValue());
		}
	}
}


haarisinfotech
  1:10 PM
package edu.disease.asn1;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.time.LocalDateTime;
import java.util.UUID;
import org.junit.Before;
import org.junit.Test;
public class ExposureTest {
	private Exposure exposure;
	
	@Before
	public void setUp() {
		final UUID uuid = UUID.randomUUID();
		exposure = new Exposure(uuid);
		exposure.setDateTime(LocalDateTime.now());
		exposure.setExposureType("D");
	}
	
	@Test
	public void testExposurePostiveScenario()
	{
		assertNotNull(exposure.toString());
		assertNotNull(exposure.getDateTime());
		assertNotNull(exposure.getPatientId());
		assertEquals("D", exposure.getExposureType());
		assertNotNull(exposure.hashCode());
		final Exposure exposureObj = exposure;
		assertTrue(exposure.equals(exposureObj));
		assertTrue(exposure.equals(exposure));
		assertFalse(exposure.equals(null));
		final Exposure exposureObjEquals = new Exposure(exposure.getPatientId());
		exposureObjEquals.setExposureType("I");
		exposureObjEquals.setDateTime(exposure.getDateTime());
		assertTrue(exposure.equals(exposureObjEquals));
		assertFalse(exposure.equals(null));
		exposureObjEquals.setDateTime(null);
		assertFalse(exposure.equals(exposureObjEquals));
		exposure.setPatientId(null);
		exposureObjEquals.setDateTime(exposure.getDateTime());
		assertFalse(exposure.equals(exposureObjEquals));
		exposure.setPatientId(null);
		exposureObjEquals.setDateTime(null);
		assertFalse(exposure.equals(exposureObjEquals));
		
	}
	
	
	@Test(expected = IllegalArgumentException.class)
	public void testException()
	{
		exposure.setExposureType(null);
	}
	
}
1:10
package edu.disease.asn1;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.time.LocalDateTime;
import java.util.NoSuchElementException;
import java.util.UUID;
import org.junit.Before;
import org.junit.Test;
public class PatientTest {
	private Patient patient;
	
	private static final String FIRST_NAME = "firstName";
	
	private static final String LAST_NAME = "lastName";
	
	private Exposure exposure;
	
	@Before
	public void setUp() {
		final UUID uuid = UUID.randomUUID();
		exposure = new Exposure(uuid);
		exposure.setDateTime(LocalDateTime.now());
		exposure.setExposureType("D");
		patient = new Patient(1,1);
		patient.setDiseaseIds(new UUID[] {UUID.randomUUID(), UUID.randomUUID()});
		patient.setExposures(new Exposure[] {exposure});
		patient.setFirstName(FIRST_NAME);
		patient.setLastName(LAST_NAME);
		patient.setPatientId(uuid);
	}
	
	@Test
	public void testPatientPostiveScenario()
	{
		assertNotNull(patient.toString());
		assertNotNull(patient.getDiseaseIds());
		assertNotNull(patient.getExposures());
		assertNotNull(patient.getFirstName());
		assertNotNull(patient.getLastName());
		assertNotNull(patient.hashCode());
		assertNotNull(patient.getPatientId());
		final Patient patientObj = patient;
		assertTrue(patient.equals(patientObj));
		assertTrue(patient.equals(patient));
		assertFalse(patient.equals(null));
		final Patient patientObjEquals = new Patient(1,1);
		patientObjEquals.setPatientId(patient.getPatientId());
		assertTrue(patient.equals(patientObjEquals));
		assertFalse(patient.equals(null));
		patientObjEquals.setPatientId(null);
		assertFalse(patient.equals(patientObjEquals));
		
	}
	
	@Test
	public void testAddDisease()
	{
	    final Patient patientTest = new Patient(3,3);
	    patientTest.addDiseaseId(UUID.randomUUID());
	    patientTest.addDiseaseId(UUID.randomUUID());
	    patientTest.addDiseaseId(UUID.randomUUID());
	    System.out.println(patientTest.getDiseaseIds()[0]);
		assertEquals(3, patientTest.getDiseaseIds().length);
	}
	
	@Test
	public void testAddExposure()
	{
	    final Patient patientTest = new Patient(3,3);
	    patientTest.addExposure(exposure);
	    patientTest.addExposure(exposure);
	    patientTest.addExposure(exposure);
	    System.out.println(patientTest.getExposures()[0]);
		assertEquals(3, patientTest.getExposures().length);
	}
	
	
	@Test(expected = IndexOutOfBoundsException.class)
	public void testAddDiseaseException()
	{
		patient.addDiseaseId(UUID.randomUUID());
	}
	
	@Test(expected = IndexOutOfBoundsException.class)
	public void testAddExposureException()
	{
		patient.addExposure(exposure);
	}
	
	@Test(expected = IllegalArgumentException.class)
	public void testExceptionPatient()
	{
		Patient patientTest = new Patient(-1, -1);
		
	}
}
1:10
package edu.disease.asn2;
import static org.junit.Assert.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import java.util.UUID;
import org.junit.Test;
public class DiseaseControlManagerTest {
	//Test cases for new methods added in DiseaseControlManager
	
		@Test(expected = IllegalStateException.class)
		public void testAddDisease1() {
			DiseaseControlManager dcm=new DiseaseControlManagerImpl(2,2);
			dcm.addDisease("ds1", true);
			dcm.addDisease("dcm2", false);
			dcm.addDisease("dc3", true);	
		}
		
		@Test
		public void testGetDiseaseForNull() {
			DiseaseControlManager dcm=new DiseaseControlManagerImpl(2,2);
			dcm.addDisease("d1", false);
			//System.out.println(UUID.randomUUID());
			assertNull(dcm.getDisease(UUID.randomUUID()));
		}
		
		@Test
		public void testGetDiseaseFromID() {
			DiseaseControlManager dcm=new DiseaseControlManagerImpl(2,2);
			dcm.addDisease("d1", false);
			assertNull(dcm.getDisease(UUID.randomUUID()));
		}
		
		@Test
		public void testGetDiseaseForNotNull() {
			DiseaseControlManager dcm=new DiseaseControlManagerImpl(2,2);
			Disease d=dcm.addDisease("d1", false);
			
			assertEquals(d, dcm.getDisease(d.getDiseaseId()));
		}
		
		@Test(expected=IllegalStateException.class)
		public void testAddPatientForISE() {
			DiseaseControlManager dcm=new DiseaseControlManagerImpl(2,2);
			dcm.addPatient("anil", "sunil", 2, 1);
			dcm.addPatient("abhi", "subhi", 2, 1);
			dcm.addPatient("kuku", "sukku", 2, 1);
		}
		
		@Test
		public void testAddPatient() {
			DiseaseControlManager dcm=new DiseaseControlManagerImpl(2,2);
			assertNotNull(dcm.addPatient("anil", "sunil", 2, 1));
			
		}
		
		@Test
		public void testAddDisease() {
			DiseaseControlManager dcm=new DiseaseControlManagerImpl(2,2);
			assertNotNull(dcm.addDisease("ddd", false));
		}
		
		
		
		@Test
		public void testGetPatientForNull() {
			DiseaseControlManager dcm=new DiseaseControlManagerImpl(2,2);
			dcm.addPatient("anil", "sunil", 2, 1);
			//System.out.println(UUID.randomUUID());
			assertNull(dcm.getPatient(UUID.randomUUID()));
		}
		
		@Test
		public void testGetPatientForNotNull() {
			DiseaseControlManager dcm=new DiseaseControlManagerImpl(2,2);
			Patient p=dcm.addPatient("anil", "sunil", 2, 1);
		
			//System.out.println(UUID.randomUUID());
			assertEquals(p, dcm.getPatient(p.getPatientId()));
			
		}
		
		@Test
		public void testAddDiseaseToPatientForNotNull() {
			DiseaseControlManager dcm=new DiseaseControlManagerImpl(2,2);
			Patient p1=dcm.addPatient("anil", "sunil", 2, 1);
			
			Disease d1=dcm.addDisease("ds1", false);
	
			dcm.addDiseaseToPatient(p1.getPatientId(),d1.getDiseaseId());
			UUID dObjUUID=p1.getDiseaseIds()[0];
			
			assertEquals(d1.getDiseaseId(),dObjUUID);
		}
		
		@Test(expected=IllegalStateException.class)
		public void testAddDiseaseToPatientForNotNull2() {
			DiseaseControlManager dcm=new DiseaseControlManagerImpl(1,1);
			Patient p1=dcm.addPatient("anil", "sunil", 2, 1);	
			dcm.addDiseaseToPatient(p1.getPatientId(),UUID.randomUUID());			
		}
		@Test(expected=IllegalStateException.class)
		public void addExposureToPatientTest() {
			DiseaseControlManager dcm=new DiseaseControlManagerImpl(1,1);
			dcm.addExposureToPatient(UUID.randomUUID(), null);
		}
		
		@Test(expected=IllegalStateException.class)
		public void addDiseaseToPatientTest() {
			DiseaseControlManager dcm=new DiseaseControlManagerImpl(1,1);
			dcm.addDiseaseToPatient(UUID.randomUUID(), UUID.randomUUID());
		}
		
		@Test(expected=IllegalStateException.class)
		public void getPatientTest() {
			DiseaseControlManager dcm=new DiseaseControlManagerImpl(1,1);
			dcm.getPatient(UUID.randomUUID());
		}
		
		@Test(expected=IllegalStateException.class)
		public void getDiseaseTest() {
			DiseaseControlManager dcm=new DiseaseControlManagerImpl(1,1);
			dcm.getDisease(UUID.randomUUID());
		}
		
		
		@Test(expected=IllegalArgumentException.class)
		public void testAddDiseaseToPatientForNull() {
			DiseaseControlManager dcm=new DiseaseControlManagerImpl(2,2);
			Patient p=dcm.addPatient("anil", "sunil", 2, 1);
			dcm.addPatient("abhi", "subhi", 2, 1);
			dcm.addDisease("ds1", false);
			dcm.addDisease("dcm2", false);
			dcm.addDiseaseToPatient(p.getPatientId(), UUID.randomUUID());
		}
		
		@Test(expected=IllegalArgumentException.class)
		public void testAddDiseaseToPatientForNull2() {
			DiseaseControlManager dcm=new DiseaseControlManagerImpl(2,2);
			dcm.addPatient("anil", "sunil", 2, 1);
			dcm.addPatient("abhi", "subhi", 2, 1);
			Disease d1=dcm.addDisease("ds1", false);
			dcm.addDisease("dcm2", false);
			dcm.addDiseaseToPatient(UUID.randomUUID(), d1.getDiseaseId());
		}
		
		@Test(expected=IllegalArgumentException.class)
		public void testAddExposureToPatientForNull() {
			DiseaseControlManager dcm=new DiseaseControlManagerImpl(2,2);
			dcm.addPatient("anil", "sunil", 2, 1);
			dcm.addPatient("abhi", "subhi", 2, 1);
			dcm.addDisease("ds1", false);
			dcm.addDisease("dcm2", false);
			dcm.addExposureToPatient(UUID.randomUUID(), new Exposure(UUID.randomUUID()));
		}
		
		@Test
		public void testAddExposureToPatientForNotNull() {
			DiseaseControlManager dcm=new DiseaseControlManagerImpl(2,2);
			Patient p1=dcm.addPatient("anil", "sunil", 2, 1);
			
			Exposure ex=new Exposure(p1.getPatientId());
			dcm.addExposureToPatient(p1.getPatientId(), ex);
		
			Exposure e=p1.getExposures()[0];
			
			assertEquals(e.getPatientId(),p1.getPatientId());
		}
		
		@Test(expected=IllegalArgumentException.class)
		public void testConstructor() {
			DiseaseControlManager dcm=new DiseaseControlManagerImpl(0,0);
		}
	
}
1:10
package edu.disease.asn2;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import java.util.UUID;
import org.junit.Test;
public class DiseaseTest {
	@Test
	public void testInfectiousDiseases() {
		Disease d = new InfectiousDisease();
		assertNotNull(d.getExamples());
	}
	@Test
	public void testNonInfectiousDiseases() {
		Disease d = new NonInfectiousDisease();
		assertNotNull(d.getExamples());
	}
	@Test
	public void testDiseasePostiveScenario()
	{
		Disease d=new InfectiousDisease();
		d.setName("dis");
		d.setDiseaseId(UUID.randomUUID());
		assertNotNull(d.toString());
		assertNotNull(d.getDiseaseId());
		assertNotNull(d.getExamples());
		assertNotNull(d.getName());
		assertNotNull(d.hashCode());
		assertTrue(d.equals(d));
		final Disease dObj = d;
		assertTrue(d.equals(d));
		assertTrue(d.equals(d));
		assertTrue(d.equals(d));
				
		assertFalse(d.equals(null));
		final Disease dObjEquals = new InfectiousDisease();
		dObjEquals.setDiseaseId(d.getDiseaseId());
		assertTrue(d.equals(dObjEquals));
		
	}
}
1:11
package edu.disease.asn2;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.time.LocalDateTime;
import java.util.UUID;
import org.junit.Before;
import org.junit.Test;
public class ExposureTest {
	private Exposure exposure;
	@Before
	public void setUp() {
		final UUID uuid = UUID.randomUUID();
		exposure = new Exposure(uuid);
		exposure.setDateTime(LocalDateTime.now());
		exposure.setExposureType("D");
	}
	@Test
	public void testExposurePostiveScenario() {
		assertNotNull(exposure.toString());
		assertNotNull(exposure.getDateTime());
		assertNotNull(exposure.getPatientId());
		assertEquals("D", exposure.getExposureType());
		assertNotNull(exposure.hashCode());
		final Exposure exposureObj = exposure;
		assertTrue(exposure.equals(exposureObj));
		assertTrue(exposure.equals(exposure));
		assertFalse(exposure.equals(null));
		final Exposure exposureObjEquals = new Exposure(exposure.getPatientId());
		exposureObjEquals.setExposureType("I");
		exposureObjEquals.setDateTime(exposure.getDateTime());
		assertTrue(exposure.equals(exposureObjEquals));
		assertFalse(exposure.equals(null));
		exposureObjEquals.setDateTime(null);
		assertFalse(exposure.equals(exposureObjEquals));
		exposure.setPatientId(null);
		exposureObjEquals.setDateTime(exposure.getDateTime());
		assertFalse(exposure.equals(exposureObjEquals));
		exposure.setPatientId(null);
		exposureObjEquals.setDateTime(null);
		assertFalse(exposure.equals(exposureObjEquals));
	}
	@Test(expected = IllegalArgumentException.class)
	public void testException() {
		exposure.setExposureType(null);
	}
}
1:11
package edu.disease.asn2;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.NoSuchElementException;
import java.util.UUID;
import org.junit.Before;
import org.junit.Test;
public class PatientTest {
	private Patient patient;
	
	private static final String FIRST_NAME = "firstName";
	
	private static final String LAST_NAME = "lastName";
	
	private Exposure exposure;
	
	@Before
	public void setUp() {
		final UUID uuid = UUID.randomUUID();
		exposure = new Exposure(uuid);
		exposure.setDateTime(LocalDateTime.now());
		exposure.setExposureType("D");
		patient = new Patient(1,1);
		patient.setDiseaseIds(new UUID[] {UUID.randomUUID(), UUID.randomUUID()});
		patient.setExposures(new Exposure[] {exposure});
		patient.setFirstName(FIRST_NAME);
		patient.setLastName(LAST_NAME);
		patient.setPatientId(uuid);
	}
	
	@Test
	public void testPatientPostiveScenario()
	{
		assertNotNull(patient.toString());
		assertNotNull(patient.getDiseaseIds());
		assertNotNull(patient.getExposures());
		assertNotNull(patient.getFirstName());
		assertNotNull(patient.getLastName());
		assertNotNull(patient.hashCode());
		assertNotNull(patient.getPatientId());
		final Patient patientObj = patient;
		assertTrue(patient.equals(patientObj));
		assertTrue(patient.equals(patient));
		assertFalse(patient.equals(null));
		final Patient patientObjEquals = new Patient(1,1);
		patientObjEquals.setPatientId(patient.getPatientId());
		assertTrue(patient.equals(patientObjEquals));
		
	}
	
	@Test
	public void testAddDisease()
	{
	    final Patient patientTest = new Patient(3,3);
	    patientTest.addDiseaseId(UUID.randomUUID());
	    patientTest.addDiseaseId(UUID.randomUUID());
	    patientTest.addDiseaseId(UUID.randomUUID());
	    System.out.println(patientTest.getDiseaseIds()[0]);
		assertEquals(3, patientTest.getDiseaseIds().length);
	}
	
	@Test
	public void testAddExposure()
	{
	    final Patient patientTest = new Patient(3,3);
	    patientTest.addExposure(exposure);
	    patientTest.addExposure(exposure);
	    patientTest.addExposure(exposure);
	    System.out.println(patientTest.getExposures()[0]);
		assertEquals(3, patientTest.getExposures().length);
	}
	
	
	@Test(expected = IndexOutOfBoundsException.class)
	public void testAddDiseaseException()
	{
		patient.addDiseaseId(UUID.randomUUID());
	}
	
	@Test(expected = IndexOutOfBoundsException.class)
	public void testAddExposureException()
	{
		patient.addExposure(exposure);
	}
	
	@Test(expected = IllegalArgumentException.class)
	public void testExceptionPatient()
	{
		Patient patientTest = new Patient(-1, -1);
		
	}
	
	@Test
    public void testPatientSorting() {
        Patient obj1 = new Patient();
        obj1.setFirstName("amul");obj1.setLastName("ambrish");
        Patient obj2 = new Patient();
        obj2.setFirstName("babu");obj2.setLastName(null);
        Patient obj3 = new Patient();
        obj3.setFirstName("anand");obj3.setLastName("babu");
        Patient obj4 = new Patient();
        obj4.setFirstName("babu");obj4.setLastName("maha");
        // Create an array of objects in an unsorted order
        Patient[] unsortedArray = {obj1, obj2, obj3,obj4};
        // Sort the array
        Arrays.sort(unsortedArray);
        // Create an array of objects in the expected sorted order
        Patient[] expectedArray = {obj1, obj2, obj3,obj4};
        // Verify that the sorted array matches the expected order
        assertArrayEquals(expectedArray, unsortedArray);
    }
	@Test
    public void testPatientSorting2() {
        Patient obj1 = new Patient();
        obj1.setFirstName(null);obj1.setLastName(null);
        Patient obj2 = new Patient();
        obj2.setFirstName(null);obj2.setLastName(null);
        // Create an array of objects in an unsorted order
        Patient[] unsortedArray = {obj1, obj2};
        // Sort the array
        Arrays.sort(unsortedArray);
        // Create an array of objects in the expected sorted order
        Patient[] expectedArray = {obj1, obj2};
        // Verify that the sorted array matches the expected order
        assertArrayEquals(expectedArray, unsortedArray);
    }
	@Test
    public void testPatientSorting3() {
        Patient obj1 = new Patient();
        obj1.setFirstName("bbb");obj1.setLastName("aaa");
        Patient obj2 = new Patient();
        obj2.setFirstName("aaa");obj2.setLastName("aaa");
        // Create an array of objects in an unsorted order
        Patient[] unsortedArray = {obj1, obj2};
        // Sort the array
        Arrays.sort(unsortedArray);
        // Create an array of objects in the expected sorted order
        Patient[] expectedArray = {obj1, obj2};
        // Verify that the sorted array matches the expected order
        assertArrayEquals(expectedArray, unsortedArray);
    }
}
1:12
package logistics;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.Month;
public class LogisticsProj {
	public static void main(String[] args) {
		
	}
}
class Transport{
	public boolean isHoliday(LocalDate ld) {
		DayOfWeek dw=ld.getDayOfWeek();
		Month m=ld.getMonth();
		if(dw==DayOfWeek.SUNDAY || dw==DayOfWeek.SATURDAY) {
			return true;
		}
		else if(ld.getDayOfMonth()==15 && m==Month.AUGUST) {
			return true;
		}
		else if(ld.getDayOfMonth()==1 && m==Month.JANUARY) {
			return true;
		}
		else if(ld.getDayOfMonth()==26 && m==Month.JANUARY) {
			return true;
		}
		else {
			return false;
		}
	}
}
1:12
package logistics;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import java.time.LocalDate;
import org.junit.Test;
public class TransportTest {
	@Test
	public void testJan1() {
		String dateString = "2021-01-01";
        LocalDate parsedDate = LocalDate.parse(dateString);
        System.out.println("Parsed Date: " + parsedDate);
        Transport obj=new Transport();
        boolean result=obj.isHoliday(parsedDate);
        assertTrue(result);
	}
	@Test
	public void test15Aug() {
		String dateString = "2023-08-15";
        LocalDate parsedDate = LocalDate.parse(dateString);
        System.out.println("Parsed Date: " + parsedDate);
        Transport obj=new Transport();
        boolean result=obj.isHoliday(parsedDate);
        assertTrue(result);
	}
	@Test
	public void test26Jan() {
		String dateString = "2023-01-26";
        LocalDate parsedDate = LocalDate.parse(dateString);
        System.out.println("Parsed Date: " + parsedDate);
        Transport obj=new Transport();
        boolean result=obj.isHoliday(parsedDate);
        assertTrue(result);
	}
	@Test
	public void testSat() {
		String dateString = "2023-08-19";
        LocalDate parsedDate = LocalDate.parse(dateString);
        System.out.println("Parsed Date: " + parsedDate);
        Transport obj=new Transport();
        boolean result=obj.isHoliday(parsedDate);
        assertTrue(result);
	}
	@Test
	public void testSun() {
		String dateString = "2023-08-20";
        LocalDate parsedDate = LocalDate.parse(dateString);
        System.out.println("Parsed Date: " + parsedDate);
        Transport obj=new Transport();
        boolean result=obj.isHoliday(parsedDate);
        assertTrue(result);
	}
	@Test
	public void testNonHoliday() {
		String dateString = "2023-08-21";
        LocalDate parsedDate = LocalDate.parse(dateString);
        System.out.println("Parsed Date: " + parsedDate);
        Transport obj=new Transport();
        boolean result=obj.isHoliday(parsedDate);
        assertFalse(result);
	}
}


haarisinfotech
  3:14 PM
package colpack;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;
public class SaxProcessor {
	public static void main(String[] args)throws Exception {
		SAXParserFactory spf=SAXParserFactory.newInstance();
		SAXParser sp=spf.newSAXParser();
		
		sp.parse("books.xml", new MyHandler());
	}
}
class MyHandler extends DefaultHandler{
	@Override
	public void startDocument() throws SAXException {
		System.out.println("document parsing started....");
	}
	
	@Override
	public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
		System.out.println("<"+qName+">");
		if(attributes!=null) {
			System.out.println(attributes.getValue(0));
		}
	}
	
	@Override
	public void characters(char[] ch, int start, int length) throws SAXException {
		String str=new String(ch,start,length);
		System.out.println(str);
	}
	
	@Override
	public void endElement(String uri, String localName, String qName) throws SAXException {
		System.out.println("</"+qName+">");	
	}
	@Override
	public void endDocument() throws SAXException {
		System.out.println("document parsing finished...");
	}
}
3:14
package colpack;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
public class DomDemo2 {
	public static void main(String[] args) throws Exception{
		DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
		DocumentBuilder db=dbf.newDocumentBuilder();
		
		Document doc= db.parse("books.xml");
		
		Element rootelement=doc.getDocumentElement();
		
		NodeList nl= rootelement.getChildNodes();
		
		System.out.println(nl.getLength());
		
		for(int i=0;i<nl.getLength();i++) {
			for(int j=0;j<nl.item(i).getChildNodes().getLength();j++) {
				String value=rootelement.getChildNodes().item(i).getChildNodes().item(j).getFirstChild().getNodeValue();
				System.out.println("values...:"+value);
			}
		}
		
	}
}
3:15
package colpack;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
public class DomDemo {
	public static void main(String[] args) throws Exception{
		DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
		DocumentBuilder db=dbf.newDocumentBuilder();
		
		Document doc= db.parse("books.xml");
		
		Element rootelement=doc.getDocumentElement();
		
		System.out.println(rootelement.getNodeName());
		
		Node n1=rootelement.getFirstChild();
		
		System.out.println(n1.getNodeName());
		
		Node n2=n1.getFirstChild();
		
		System.out.println(n2.getNodeType());
		
		System.out.println(n2.getNodeName());
		
		Node n3=n2.getFirstChild();
		
		System.out.println(n3.getNodeType());
		
		System.out.println(n3.getNodeValue());
		
	}
}
3:15
package colpack;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;
public class SaxProcessor {
	public static void main(String[] args)throws Exception {
		SAXParserFactory spf=SAXParserFactory.newInstance();
		SAXParser sp=spf.newSAXParser();
		
		sp.parse("books.xml", new MyHandler());
	}
}
class MyHandler extends DefaultHandler{
	@Override
	public void startDocument() throws SAXException {
		System.out.println("document parsing started....");
	}
	
	@Override
	public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
		System.out.println("<"+qName+">");
		if(attributes!=null) {
			System.out.println(attributes.getValue(0));
		}
	}
	
	@Override
	public void characters(char[] ch, int start, int length) throws SAXException {
		String str=new String(ch,start,length);
		System.out.println(str);
	}
	
	@Override
	public void endElement(String uri, String localName, String qName) throws SAXException {
		System.out.println("</"+qName+">");	
	}
	@Override
	public void endDocument() throws SAXException {
		System.out.println("document parsing finished...");
	}
}
3:15
<books><book id="b1"><name>java</name><author>jack</author><price>300</price></book><book id="b2"><name>xml</name><author>paul</author><price>400</price></book><book id="b3"><name>spring</name><author>john</author><price>200</price></book></books>
3:15
<report>
	<student rollno="100">
		<marks>
			<english>40</english>
			<tamil>70</tamil>
			<physics>60</physics>
			<chemistry>70</chemistry>
			<biology>90</biology>
			<maths>100</maths>
		</marks>
	</student>
	<student rollno="100">
		<marks>
			<english>40</english>
			<tamil>70</tamil>
			<physics>60</physics>
			<chemistry>70</chemistry>
			<biology>90</biology>
			<maths>100</maths>
		</marks>
	</student>
</report>
3:15
hello=\u0C35\u0C23\u0C15\u0C4D\u0C15\u0C02
3:15
package colpack;
import java.io.FileWriter;
import java.nio.charset.Charset;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.Scanner;
public class UtilDemo15 {
	public static void main(String[] args)throws Exception {
		Locale locale=Locale.getDefault();
		
		System.out.println(locale);
		
		Scanner scan=new Scanner(System.in);
		System.out.println("Please enter ta for tamil and te for telugu..:");
		String lang=scan.nextLine();
		locale=new Locale(lang);
		Locale.setDefault(locale);
		
		locale=Locale.getDefault();
		
		System.out.println(locale);
		
		ResourceBundle rb=ResourceBundle.getBundle("dictionary",locale);
		
		String result=rb.getString("hello");
		
FileWriter out=new FileWriter("abc2.html",Charset.forName("UTF-8"));
		
		
		out.write("<!DOCTYPE html>\r\n"
				+ "<html>\r\n"
				+ "<head>\r\n"
				+ "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\r\n"
				+ "<title>Insert title here</title>\r\n"
				+ "</head>");
		out.write("<body>");
		out.write(result);
		out.write("</body></html>");
		out.close();
	}
}
3:15
package colpack;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.nio.charset.Charset;
import java.util.Properties;
public class UtilDemo14 {
	public static void main(String[] args) throws Exception{
		Properties prop=new Properties();
		prop.load(new FileInputStream("dictionary_ta.properties"));
		
		String result=(String)prop.get("hello");
		
		FileWriter out=new FileWriter("abc2.html",Charset.forName("UTF-8"));
		
		
		out.write("<!DOCTYPE html>\r\n"
				+ "<html>\r\n"
				+ "<head>\r\n"
				+ "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\r\n"
				+ "<title>Insert title here</title>\r\n"
				+ "</head>");
		out.write("<body>");
		out.write(result);
		out.write("</body></html>");
		
		out.close();
		
	}
}
3:15
package colpack;
import java.util.StringTokenizer;
public class UtilDemo13 {
	public static void main(String[] args) {
		String str="jack,and,jill,went,the,hill";
		
		StringTokenizer st=new StringTokenizer(str,",");
		
		while(st.hasMoreTokens()) {
			System.out.println(st.nextToken());
		}
		
	}
}


haarisinfotech
  10:45 AM
<!ELEMENT books (book)+>
<!ELEMENT book (name,author+,price?)>
<!ELEMENT name (#PCDATA)>
<!ELEMENT author (#PCDATA)>
<!ELEMENT price (#PCDATA)>
<!ATTLIST book id CDATA  "B1">
10:45
package colpack;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
public class DomDemo4 {
	public static void main(String[] args) throws Exception{
		DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
		dbf.setValidating(true);
		dbf.setIgnoringElementContentWhitespace(true);
		DocumentBuilder db=dbf.newDocumentBuilder();
		
		Document doc= db.parse("books.xml");
		
		System.out.println(doc.getDocumentElement().getChildNodes().getLength());
				
	}
}


haarisinfotech
  10:52 AM
<!DOCTYPE books SYSTEM "books.dtd">
<books>
<book>
	<name>java</name>
	<author>jack</author>
	<price>300</price>
</book>
<book id="b2">
	<name>xml</name>
	<author>paul</author>
	<price>400</price>
</book>
<book id="b3">
	<name>spring</name>
	<author>john</author>
	<price>200</price>
</book>
</books>


haarisinfotech
  11:49 AM
package colpack;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
public class QueueDemo {
	public static void main(String[] args) {
        Deque<String> deque = new ArrayDeque<>();
        // Enqueue elements at the rear
        deque.offer("anand");
        deque.offer("balu");
        deque.offer("chandran");
        // Dequeue and print elements from the front
        while (!deque.isEmpty()) {
            String frontElement = deque.poll();
            System.out.println("Front Dequeued: " + frontElement);
        }
        // Push elements onto the front
        deque.push("anand");
        deque.push("balu");
        deque.push("chandran");
        // Pop and print elements from the front
        while (!deque.isEmpty()) {
            String frontElement = deque.pop();
            System.out.println("Front Popped: " + frontElement);
        }
        System.out.println(deque);
    }
}
11:49
package colpack;
import java.util.PriorityQueue;
public class PriorityQueueDemo {
    public static void main(String[] args) {
        // Create a priority queue
        PriorityQueue<Task> priorityQueue = new PriorityQueue<>();
        // Add tasks to the priority queue
        priorityQueue.add(new Task(5, "Do research"));
        priorityQueue.add(new Task(1, "Write report"));
        priorityQueue.add(new Task(3, "Prepare presentation"));
        priorityQueue.add(new Task(2, "Review draft"));
        priorityQueue.add(new Task(4, "Review draft2"));
        // Process tasks based on priority
        while (!priorityQueue.isEmpty()) {
            Task task = priorityQueue.poll();
            System.out.println("Task: " + task.getDescription() + ", Priority: " + task.getPriority());
        }
    }
}
class Task implements Comparable<Task> {
    private int priority;
    private String description;
    public Task(int priority, String description) {
        this.priority = priority;
        this.description = description;
    }
    public int getPriority() {
        return priority;
    }
    public String getDescription() {
        return description;
    }
    @Override
    public int compareTo(Task other) {
        return Integer.compare(this.priority, other.priority);
    }
}
11:50
package colpack;
import java.util.Stack;
public class StackDemo {
    public static void main(String[] args) {
        // Create a new stack
        Stack<Integer> stack = new Stack<>();
        // Push elements onto the stack
        stack.push(10);
        stack.push(20);
        stack.push(30);
        System.out.println("Stack: " + stack);
        // Pop elements from the stack
        int poppedElement = stack.pop();
        System.out.println("Popped Element: " + poppedElement);
        System.out.println("Stack after popping: " + stack);
        // Peek at the top element without removing it
        int topElement = stack.peek();
        System.out.println("Top Element: " + topElement);
        System.out.println("Stack after peeking: " + stack);
        // Check if the stack is empty
        boolean isEmpty = stack.isEmpty();
        System.out.println("Is stack empty? " + isEmpty);
        // Get the size of the stack
        int size = stack.size();
        System.out.println("Stack size: " + size);
    }
}
11:55
PDF
 

DiseaseAssignment4.pdf
PDF


haarisinfotech
  10:20 AM
package colpack;
import java.util.Arrays;
import java.util.List;
import java.util.function.Predicate;
public class MyStreamDemo1 {
	public static void main(String[] args) {
		List<Integer> list=Arrays.asList(2,4,6,8,10);
		//boolean b=list.stream().allMatch(new MyPredicate());
		//boolean b=list.stream().allMatch(MyStreamDemo1::mytest);
		boolean b=list.stream().allMatch((t)->{return t%2==0;});
		System.out.println("All Even Numbers...:"+b);
		
	}
	public static boolean mytest(Integer t) {
		if(t%2==0) {
			return true;
		}
		else {
			return false;
		}
	}
}
class MyPredicate implements Predicate<Integer>{
	@Override
	public boolean test(Integer t) {
		if(t%2==0) {
			return true;
		}
		else {
			return false;
		}
	}
}


haarisinfotech
  10:54 AM
package colpack;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Stream;
public class MyStreamDemo2 {
	public static void main(String[] args) {
		List<Integer> list=Arrays.asList(2,4,6,8,10);
		list.stream().forEach(System.out::print);
		System.out.println();
		list.parallelStream().forEachOrdered(System.out::print);
		
		int sum=list.stream().mapToInt((t)->{return t+100;}).sum();
		System.out.println(sum);
		
		int sum2=list.parallelStream().mapToInt((t)->{return t+100;}).sum();
		System.out.println(sum2);
	}
}
10:58
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveTask;
public class ForkAndJoinDemo {
	public static void main(String[] args) {
		String arr[]= {"chennai","banglore","chennai","kanpur","delhi","japur","hyderabad","madurai","chennai","mumbai"};
		int count=0;
		for(String s:arr) {
			if(s.equals("chennai")) {
				count++;
			}
		}	
		System.out.println("Number of chennais are..:"+count);
		
		ForkJoinPool fjp=new ForkJoinPool().commonPool();
		
		MyTask task1=new MyTask(arr,0,3,"chennai");
		MyTask task2=new MyTask(arr,3,5,"chennai");
		MyTask task3=new MyTask(arr,5,7,"chennai");
		MyTask task4=new MyTask(arr,7,9,"chennai");
		
		int result1=fjp.invoke(task1);
		int result2=fjp.invoke(task2);
		int result3=fjp.invoke(task3);
		int result4=fjp.invoke(task4);
		
		int total=result1+result2+result3+result4;
		System.out.println("The Total count of chennai is.."+total);
	}
}
class MyTask extends RecursiveTask<Integer>{
	String arr[];
	int start,end;
	String searchString;
	public MyTask(String arr[],int start,int end,String searchString) {
		this.arr=arr;
		this.start=start;
		this.end=end;
		this.searchString=searchString;
	}
	@Override
	protected Integer compute() {
		int count=0;
		for(int i=start;i<end;i++) {
			if(arr[i].equals("chennai")) {
				count++;
			}
		}
		return count;
	}
}


haarisinfotech
  11:57 AM
package colpack;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
public class MyStreamDemo3 {
	public static void main(String[] args) {
		List<Item> items = new ArrayList<Item>();
        //Adding Products
        items.add(new Item(1,"mango",200));
        items.add(new Item(2,"apple",100));
        items.add(new Item(3,"pineapple",180));
        items.add(new Item(4,"jack",350));
        items.add(new Item(5,"grapes",60));
        List<Float> mylist=new ArrayList<>();
        for(Item i:items) {
        	if(i.price<=200) {
        		mylist.add(i.price);
        		if(mylist.size()==2) {
        			break;
        		}
        	}
        }
        System.out.println(mylist);
        mylist=items.stream().filter((i)->i.price<=200).limit(2).map((i)->i.price).collect(Collectors.toList());
        System.out.println(mylist);
     }
}
class Item{
	int id;String name;float price;
	public Item(int sno,String name,float price) {
		this.id=id;this.name=name;this.price=price;
	}
	public float getPrice() {
		return this.price;
	}
}


haarisinfotech
  12:44 PM
PDF
 

StreamsExercises.pdf
PDF
12:45
PDF
 

JDBC study material.pdf
PDF


haarisinfotech
  1:26 PM
2 files
 

HTML study material.pdf
PDF

JavaScript study material.pdf
PDF
1:26
PDF
 

DiseaseAssignment5And6.pdf
PDF
:raised_hands:
1



haarisinfotech
  9:56 AM
2 files
 

mysql-connector-java-8.0.20.jar
Binary

mysql-installer-community-8.0.29.0.msi
Binary


haarisinfotech
  11:27 AM
package jdbcpack;
import java.sql.Connection;
import java.sql.DriverManager;
public class JDBCProg1 {
	public static void main(String[] args)throws Exception {
		//Step 1 - Load or register the driver
		//Step 2 - Establish the connection
		
		//step1-loading the driver
		Class.forName("com.mysql.cj.jdbc.Driver");
		//step 2 - Establish the connection
		String url="jdbc:mysql://localhost:3306/vastpro";
		String username="root";
		String password="root";
		Connection con=DriverManager.getConnection(url,username,password);
		
		System.out.println(con);
	}
}
11:27
mysql> create schema vastpro;
Query OK, 1 row affected (0.10 sec)
mysql> use vastpro;
Database changed
mysql> show tables;
Empty set (0.07 sec)
mysql>


haarisinfotech
  12:17 PM
mysql> use vastpro;
Database changed
mysql> show tables;
Empty set (0.07 sec)
mysql> create table employee (eid int(5),ename varchar2(50),epass varchar2(8),esal int(10),ecity varchar2(40),flag int(1));
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'varchar2(50),epass varchar2(8),esal int(10),ecity varchar2(40),flag int(1))' at line 1
mysql> create table employee (eid int(5),ename varchar(50),epass varchar(8),esal int(10),ecity varchar(40),flag int(1));
Query OK, 0 rows affected, 3 warnings (0.12 sec)
mysql> show tables;
+-------------------+
| Tables_in_vastpro |
+-------------------+
| employee          |
+-------------------+
1 row in set (0.01 sec)
mysql> desc employee;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| eid   | int         | YES  |     | NULL    |       |
| ename | varchar(50) | YES  |     | NULL    |       |
| epass | varchar(8)  | YES  |     | NULL    |       |
| esal  | int         | YES  |     | NULL    |       |
| ecity | varchar(40) | YES  |     | NULL    |       |
| flag  | int         | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+
6 rows in set (0.02 sec)
mysql> select * from employee;
Empty set (0.21 sec)
mysql> insert into employee values (1,'ramu','spider',20000,'chennai',0);
Query OK, 1 row affected (0.01 sec)
mysql> insert into employee values (2,'somu','spider',20000,'chennai',0);
Query OK, 1 row affected (0.01 sec)
mysql> select * from employee;
+------+-------+--------+-------+---------+------+
| eid  | ename | epass  | esal  | ecity   | flag |
+------+-------+--------+-------+---------+------+
|    1 | ramu  | spider | 20000 | chennai |    0 |
|    2 | somu  | spider | 20000 | chennai |    0 |
+------+-------+--------+-------+---------+------+
2 rows in set (0.00 sec)
mysql> select * from employee where ecity='chennai';
+------+-------+--------+-------+---------+------+
| eid  | ename | epass  | esal  | ecity   | flag |
+------+-------+--------+-------+---------+------+
|    1 | ramu  | spider | 20000 | chennai |    0 |
|    2 | somu  | spider | 20000 | chennai |    0 |
+------+-------+--------+-------+---------+------+
2 rows in set (0.00 sec)
mysql> insert into employee values (2,'somu','spider',20000,'banglore',0);
Query OK, 1 row affected (0.01 sec)
mysql> select * from employee;
+------+-------+--------+-------+----------+------+
| eid  | ename | epass  | esal  | ecity    | flag |
+------+-------+--------+-------+----------+------+
|    1 | ramu  | spider | 20000 | chennai  |    0 |
|    2 | somu  | spider | 20000 | chennai  |    0 |
|    2 | somu  | spider | 20000 | banglore |    0 |
+------+-------+--------+-------+----------+------+
3 rows in set (0.00 sec)
mysql> select * from employee where ecity='chennai';
+------+-------+--------+-------+---------+------+
| eid  | ename | epass  | esal  | ecity   | flag |
+------+-------+--------+-------+---------+------+
|    1 | ramu  | spider | 20000 | chennai |    0 |
|    2 | somu  | spider | 20000 | chennai |    0 |
+------+-------+--------+-------+---------+------+
2 rows in set (0.00 sec)
mysql> delete employee where eid=2;
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'where eid=2' at line 1
mysql> delete from employee where eid=2;
Query OK, 2 rows affected (0.01 sec)
mysql> select * from employee;
+------+-------+--------+-------+---------+------+
| eid  | ename | epass  | esal  | ecity   | flag |
+------+-------+--------+-------+---------+------+
|    1 | ramu  | spider | 20000 | chennai |    0 |
+------+-------+--------+-------+---------+------+
1 row in set (0.00 sec)
mysql> update employee set esal=30000 where eid=1;
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0
mysql> select * from employee;
+------+-------+--------+-------+---------+------+
| eid  | ename | epass  | esal  | ecity   | flag |
+------+-------+--------+-------+---------+------+
|    1 | ramu  | spider | 30000 | chennai |    0 |
+------+-------+--------+-------+---------+------+
1 row in set (0.00 sec)
mysql>


haarisinfotech
  12:58 PM
package jdbcpack;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.Statement;
public class JDBCProg2 {
	public static void main(String[] args)throws Exception {
		//Step 1 - Load or register the driver
		//Step 2 - Establish the connection
		
		//step1-loading the driver
		Class.forName("com.mysql.cj.jdbc.Driver");
		//step 2 - Establish the connection
		String url="jdbc:mysql://localhost:3306/vastpro";
		String username="root";
		String password="root";
		Connection con=DriverManager.getConnection(url,username,password);
		
		//Statement st=con.createStatement();
		//String uname="shoiab";
		//String sql="insert into employee values(1,'ramu','spider',1000,'chennai',0)";
		String sql="insert into employee values (?,?,?,?,?,?)";
		PreparedStatement pstmt=con.prepareStatement(sql);
					
		pstmt.setInt(1, 2);
		pstmt.setString(2, "somu");
		pstmt.setString(3, "superman");
		pstmt.setInt(4, 2000);
		pstmt.setString(5, "banglore");
		pstmt.setInt(6, 0);
		
		int n=pstmt.executeUpdate();
		
		System.out.println("Number of rows updated...:"+n);
		
		
		
	}
}
12:59
package jdbcpack;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
public class JDBCProg3 {
	public static void main(String[] args)throws Exception {
		//Step 1 - Load or register the driver
		//Step 2 - Establish the connection
		
		//step1-loading the driver
		Class.forName("com.mysql.cj.jdbc.Driver");
		//step 2 - Establish the connection
		String url="jdbc:mysql://localhost:3306/vastpro";
		String username="root";
		String password="root";
		Connection con=DriverManager.getConnection(url,username,password);
		
		String sql="create table employee(eid int(5),ename varchar(50),epass varchar(8),esal int(10),ecity varchar(40),flag int(1))";
		
		Statement stmt=con.createStatement();
		
		boolean b=stmt.execute(sql);
		
		sql="select * from employee";
		b=stmt.execute(sql);
		
		System.out.println(b?"success-table created":"failure");
		
	}
}
12:59
package jdbcpack;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
public class JDBCProg4 {
	public static void main(String[] args)throws Exception {
		//Step 1 - Load or register the driver
		//Step 2 - Establish the connection
		
		//step1-loading the driver
		Class.forName("com.mysql.cj.jdbc.Driver");
		//step 2 - Establish the connection
		String url="jdbc:mysql://localhost:3306/vastpro";
		String username="root";
		String password="root";
		Connection con=DriverManager.getConnection(url,username,password);
		
		Statement stmt=con.createStatement();
		
		String sql="select * from employee";
		
		ResultSet rs=stmt.executeQuery(sql);
		
		while(rs.next()) {
			System.out.println(rs.getInt("eid"));
			System.out.println(rs.getString(2));
		}
		
	}
}
1:00
9 files
 

datainfo.java
Java

eg1.java
Java

eg2.java
Java

eg3.java
Java

eg4.java
Java

eg5.java
Java

eg6.java
Java

eg7.java
Java

eg8.java
Java
1:01
8 files
 

eg9.java
Java

eg10.java
Java

eg11.java
Java

eg12.java
Java

eg12-PROCEDURE.java
Java

eg13.java
Java

eg14-ResultSetScroll sensitive.java
Java

ins.java
Java


haarisinfotech
  7:07 PM
8 files
 

eg9.java
Java

eg10.java
Java

eg11.java
Java

eg12.java
Java

eg12-PROCEDURE.java
Java

eg13.java
Java

eg14-ResultSetScroll sensitive.java
Java

ins.java
Java


haarisinfotech
  10:13 AM
package jdbcpack;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Types;
public class JDBCProg5 {
	public static void main(String[] args)throws Exception {
		Class.forName("com.mysql.cj.jdbc.Driver");
		//step 2 - Establish the connection
		String url="jdbc:mysql://localhost:3306/vastpro";
		String username="root";
		String password="root";
		Connection con=DriverManager.getConnection(url,username,password);
		
		CallableStatement cs= con.prepareCall("{call myproc1()}");
		
		cs.executeUpdate();
		
		cs=con.prepareCall("{call updateFlag(?,?)}");
		cs.setString(1, "somu");
		cs.setInt(2, 1);
		
		int i=cs.executeUpdate();
		System.out.println("no of rows updated...:"+i);
		
		cs=con.prepareCall("{call countEmployees(?)}");
		cs.registerOutParameter(1, Types.INTEGER);
		
		cs.execute();
		
		int no=cs.getInt(1);
		
		System.out.println("No Of Rows...:"+no);
		
		cs=con.prepareCall("{call getFlagValue(?,?)}");
		
		cs.setString(1,"somu");
		cs.registerOutParameter(2, Types.INTEGER);
		
		cs.execute();
		
		int flagvalue=cs.getInt(2);
		System.out.println("flag value of ramu is...:"+flagvalue);
	}
}
10:13
mysql> create procedure getFlagValue(IN name VARCHAR(40),OUT myflag INT)
    -> begin
    -> select flag into myflag from employee where ename=name;
    -> end;
    -> //
Query OK, 0 rows affected (0.01 sec)
10:14
mysql> create procedure countEmployees(OUT noofrows INT)
    -> begin
    -> select count(*) into noofrows from employee;
    -> end;
    -> //
Query OK, 0 rows affected (0.01 sec)
10:14
mysql> create procedure updateFlag(IN name VARCHAR(40),IN myflag INT)
    -> begin
    -> update employee set flag=myflag where ename=name;
    -> end;
    -> //
10:14
mysql> create procedure myproc1()
    -> begin
    -> update employee set flag=0;
    -> end
    -> //


haarisinfotech
  10:41 AM
mysql> delimiter //
mysql> create procedure getFlag2(IN name VARCHAR(40))
    -> begin
    -> declare myflag INT;
    -> select flag into myflag from employee where ename=name;
    -> select myflag;
    -> end;
    -> //
Query OK, 0 rows affected (0.01 sec)
mysql> call getFlag2('ramu');
    -> //
+--------+
| myflag |
+--------+
|      0 |
+--------+
1 row in set (0.00 sec)
Query OK, 0 rows affected (0.00 sec)


haarisinfotech
  11:31 AM
package jdbcpack;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
public class ReadWriteText {
	public static void main(String[] args)throws Exception {
		String url="jdbc:mysql://localhost:3306/vastpro";
		String username="root";
		String password="root";
		Connection con=DriverManager.getConnection(url,username,password);
		
		String str="jack and jill went up the hill";
		byte b[]=str.getBytes();
//		writeBlob(b,con);
//		writeClob(str,con);
		readBlob(con);
	}
	
	public static void writeBlob(byte b[],Connection con)throws Exception {
		PreparedStatement ps=con.prepareStatement("insert into myfiles (file1) values (?)");
		ps.setBytes(1, b);
		ps.execute();
	}
	public static void writeClob(String str,Connection con)throws Exception {
		PreparedStatement ps=con.prepareStatement("insert into myfiles (file2) values (?)");
		ps.setString(1, str);
		ps.execute();
	}
	
	public static void readBlob(Connection con)throws Exception {
		PreparedStatement ps=con.prepareStatement("select * from myfiles");
		ResultSet rs=ps.executeQuery();
		while(rs.next()) {
			System.out.println(rs.getInt(1));
			byte b[]=rs.getBytes(2);
			if(b!=null) {
			String str=new String(b);
			System.out.println(str);
			}
			System.out.println(rs.getString(3));
		}
	}
}
11:32
mysql> create table myimages(
    -> ID INT AUTO_INCREMENT PRIMARY_KEY,
    -> image BLOB);
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'PRIMARY_KEY,
image BLOB)' at line 2
mysql> create table myimages(
    -> ID INT AUTO_INCREMENT PRIMARY KEY,
    -> image BLOB);
Query OK, 0 rows affected (0.05 sec)
mysql> desc myimages;
+-------+------+------+-----+---------+----------------+
| Field | Type | Null | Key | Default | Extra          |
+-------+------+------+-----+---------+----------------+
| ID    | int  | NO   | PRI | NULL    | auto_increment |
| image | blob | YES  |     | NULL    |                |
+-------+------+------+-----+---------+----------------+
2 rows in set (0.08 sec)
mysql> create table myfiles(
    -> ID INT AUTO_INCREMENT PRIMARY KEY,
    -> file1 BLOB,
    -> file2 TEXT);
Query OK, 0 rows affected (0.64 sec)


haarisinfotech
  11:44 AM
package jdbcpack;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.imageio.ImageIO;
import javax.imageio.ImageReader;
public class ReadWriteImage {
	public static void main(String[] args) throws Exception{
		String url="jdbc:mysql://localhost:3306/vastpro";
		String username="root";
		String password="root";
		Connection con=DriverManager.getConnection(url,username,password);
//		PreparedStatement ps=con.prepareStatement("insert into myimages (image) values(?)");
//		ps.setBytes(1, readImageToBytes("omiet.png"));
//		ps.execute();
		
		//To Read
		PreparedStatement ps=con.prepareStatement("select * from myimages");
		ResultSet rs=ps.executeQuery();
		while(rs.next()) {
			System.out.println(rs.getInt(1));
			byte b[]=rs.getBytes(2);
			ByteArrayInputStream inputStream = new ByteArrayInputStream(b);
	       
			BufferedImage image = ImageIO.read(inputStream);
            // Display or save the BufferedImage as needed
            // For example, saving the image to a file:
            ImageIO.write(image, "png", new File("output.png"));
		}
	}
	
	public static byte[] readImageToBytes(String path) throws Exception{
		FileInputStream fis=new FileInputStream(path);
		byte b[]=new byte[fis.available()];
		fis.read(b);
		return b;
	}
	
	
}


haarisinfotech
  12:53 PM
package jdbcpack;
import java.sql.Connection;
import java.sql.DriverManager;
public class ConnectionUtility {
	private ConnectionUtility() {
		
	}
	private static ThreadLocal<Connection> tlocal=new ThreadLocal<Connection>();
	static {
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	synchronized public static Connection getConnection()throws Exception {
		Connection con=tlocal.get();
		if(con==null) {
			String url="jdbc:mysql://localhost:3306/vastpro";
			String username="root";
			String password="root";
			con=DriverManager.getConnection(url,username,password);
			tlocal.set(con);
			return con;
		}
		else {
			return con;
		}
	}
	
	synchronized public static void closeConnection() {
		Connection con=tlocal.get();
		if(con==null) {
			System.out.println("no connection available for closing...");
		}
		else {
			try {
			con.close();
			tlocal.remove();
			}catch(Exception e) {
				e.printStackTrace();
			}
		}
	}
}
12:53
package jdbcpack;
import java.sql.Connection;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
public class TestConUtility {
	public static void main(String[] args)throws Exception {
		ExecutorService es=Executors.newFixedThreadPool(2);
		
		es.execute(()->{
			try {
			Connection con=ConnectionUtility.getConnection();
			System.out.println("Thread1...:"+con);
			}catch(Exception e) {
				e.printStackTrace();
			}
		});
		
		es.execute(()->{
			try {
			Connection con=ConnectionUtility.getConnection();
			System.out.println("Thread2...:"+con);
			Connection connn=ConnectionUtility.getConnection();
			System.out.println("Thread2...:"+connn);
			ConnectionUtility.closeConnection();
			Connection connn2=ConnectionUtility.getConnection();
			System.out.println("Thread2...:"+connn2);
			}catch(Exception e) {
				e.printStackTrace();
			}
		});
		es.shutdown();
	}
}
12:53
package jdbcpack;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
public class ConnectionDemo {
	public static void main(String[] args)throws Exception {
		Connection con=ConnectionUtility.getConnection();
		
		DatabaseMetaData dm= con.getMetaData();
		
		System.out.println(dm.getDatabaseProductName());
		System.out.println(dm.getDatabaseMajorVersion());
		System.out.println(dm.getDriverName());
		System.out.println(dm.getDefaultTransactionIsolation());
		System.out.println("None..:"+Connection.TRANSACTION_NONE);
		System.out.println("Read Committed..:"+Connection.TRANSACTION_READ_COMMITTED);
		System.out.println("Read uncommitted..:"+Connection.TRANSACTION_READ_UNCOMMITTED);
		System.out.println("Repeat Read..:"+Connection.TRANSACTION_REPEATABLE_READ);
		System.out.println("Serializable..:"+Connection.TRANSACTION_SERIALIZABLE);
		
		con.setTransactionIsolation(8);
		dm= con.getMetaData();
		System.out.println(dm.getDefaultTransactionIsolation());
		System.out.println(con.getTransactionIsolation());
		
		
	}
}
12:53
package jdbcpack;
import java.sql.Connection;
import java.sql.PreparedStatement;
public class TransactionDemo {
	public static void main(String[] args)throws Exception {
		Connection con=ConnectionUtility.getConnection();
		con.setAutoCommit(false);
		PreparedStatement ps=con.prepareStatement("update employee set esal=? where ename=?");
		try {
		ps.setInt(1, 1000);
		ps.setString(2, "ramu");
		ps.executeUpdate();
		
		ps=con.prepareStatement("update employee set esal=? where ename=?");
		
		ps.setInt(1, 3000);
		ps.setString(3, "somu");
		ps.executeUpdate();
		
		con.commit();
		}catch(Exception e) {
			con.rollback();
			e.printStackTrace();
		}
	}
		
}


haarisinfotech
  10:42 AM
package jdbcpack;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.Savepoint;
public class TransactionDemo {
	public static void main(String[] args)throws Exception {
		Connection con=ConnectionUtility.getConnection();
		
		Savepoint sp=null;
		try {
		PreparedStatement psup=con.prepareStatement("update employee set flag=1");
		psup.executeUpdate();
		
		 sp=con.setSavepoint("first");
		
		PreparedStatement ps=con.prepareStatement("update employee set esal=? where ename=?");
		ps.setInt(1, 1000);
		ps.setString(2, "ramu");
		ps.executeUpdate();
		
		ps=con.prepareStatement("update employee set esal=? where ename=?");
		
		ps.setInt(1, 3000);
		ps.setString(3, "somu");
		ps.executeUpdate();
		
		ConnectionUtility.closeConnection(null,null);
		}catch(Exception e) {
			ConnectionUtility.closeConnection(e, sp);
			e.printStackTrace();
		}
	}
		
}
10:47
package jdbcpack;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Savepoint;
import java.util.Properties;
public class ConnectionUtility {
	private ConnectionUtility() {
		
	}
	private static ThreadLocal<Connection> tlocal=new ThreadLocal<Connection>();
	static String url,username,password;
	static {
		try {
			Properties prop=new Properties();
			prop.load(new FileInputStream("dbconfig.properties"));
			url=prop.getProperty("url");
			username=prop.getProperty("username");
			password=prop.getProperty("password");
			Class.forName(prop.getProperty("driver"));
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	synchronized public static Connection getConnection()throws Exception {
		Connection con=tlocal.get();
		if(con==null) {		
			con=DriverManager.getConnection(url,username,password);
			con.setAutoCommit(false);
			tlocal.set(con);
			return con;
		}
		else {
			return con;
		}
	}
	
	synchronized public static void closeConnection(Exception ex,Savepoint sp) {
		Connection con=tlocal.get();
		if(con==null) {
			System.out.println("no connection available for closing...");
		}
		else {
			try {
			if(ex==null) {
				con.commit();
			}
			else {
				if(sp!=null) {
					con.rollback(sp);
					con.commit();
				}
				else {
					con.rollback();
				}
			}
			con.close();
			tlocal.remove();
			}catch(Exception e) {
				e.printStackTrace();
			}
		}
	}
}


haarisinfotech
  1:04 PM
package jdbcpack;
import java.io.Serializable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Objects;
public class DTODemo {
	public static void main(String[] args)throws Exception {
		Connection con=ConnectionUtility.getConnection();
		
		PreparedStatement p=con.prepareStatement("select * from employee");
		
		ResultSet rs=p.executeQuery();
		ArrayList<Emp> list=new ArrayList<Emp>();
		while(rs.next()) {
			Emp emp=new Emp();
			emp.setEid(rs.getInt("eid"));
			emp.setEname(rs.getString("ename"));
			emp.setEpass(rs.getString(3));
			emp.setEsal(rs.getInt(4));
			emp.setEcity(rs.getString(5));
			emp.setFlag(rs.getInt("flag"));
			list.add(emp);
		}
		
		
	}
}
//DTO - Data Transfer Object
class Emp implements Serializable{
	private int eid,esal,flag;
	private String ename,epass,ecity;
	/**
	 * @return the eid
	 */
	public int getEid() {
		return eid;
	}
	/**
	 * @param eid the eid to set
	 */
	public void setEid(int eid) {
		this.eid = eid;
	}
	/**
	 * @return the esal
	 */
	public int getEsal() {
		return esal;
	}
	/**
	 * @param esal the esal to set
	 */
	public void setEsal(int esal) {
		this.esal = esal;
	}
	/**
	 * @return the flag
	 */
	public int getFlag() {
		return flag;
	}
	/**
	 * @param flag the flag to set
	 */
	public void setFlag(int flag) {
		this.flag = flag;
	}
	/**
	 * @return the ename
	 */
	public String getEname() {
		return ename;
	}
	/**
	 * @param ename the ename to set
	 */
	public void setEname(String ename) {
		this.ename = ename;
	}
	/**
	 * @return the epass
	 */
	public String getEpass() {
		return epass;
	}
	/**
	 * @param epass the epass to set
	 */
	public void setEpass(String epass) {
		this.epass = epass;
	}
	/**
	 * @return the ecity
	 */
	public String getEcity() {
		return ecity;
	}
	/**
	 * @param ecity the ecity to set
	 */
	public void setEcity(String ecity) {
		this.ecity = ecity;
	}
	@Override
	public int hashCode() {
		return Objects.hash(eid);
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Emp other = (Emp) obj;
		return eid == other.eid;
	}
	@Override
	public String toString() {
		return "Emp [eid=" + eid + ", esal=" + esal + ", flag=" + flag + ", ename=" + ename + ", epass=" + epass
				+ ", ecity=" + ecity + "]";
	}
	
	
}
1:04
package jdbcpack;
import java.util.List;
public interface EmployeeDAO {
	public Emp findByID(int eno)throws Exception;
	public Emp findByEname(String ename)throws Exception;
	public List<Emp> findAll()throws Exception;
	public int createEmployee(Emp emp);
	public int updateEmployee(Emp emp);
	public int deleteEmployeeByID(int eno);
	public int deleteEmployeeByName(String ename);
}
1:04
package jdbcpack;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
public class EmployeeDAOImpl implements EmployeeDAO{
	Connection con;
	PreparedStatement ps;
	ResultSet rs;
	 public EmployeeDAOImpl(Connection con) {
		this.con=con;
	}
	@Override
	public Emp findByID(int eno) throws Exception{
		ps=con.prepareStatement("select * from employee where eid=?");
		ps.setInt(1, eno);
		rs=ps.executeQuery();
		Emp emp=new Emp();
		if(rs.next()) {
			emp.setEid(rs.getInt("eid"));
			emp.setEname(rs.getString("ename"));
			emp.setEpass(rs.getString(3));
			emp.setEsal(rs.getInt(4));
			emp.setEcity(rs.getString(5));
			emp.setFlag(rs.getInt("flag"));
		}
		else {
			System.out.println("No Record found.....");
		}
		ps.close();rs.close();
		ConnectionUtility.closeConnection(null, null);
		return emp;
	}
	@Override
	public Emp findByEname(String ename)throws Exception {
		ps=con.prepareStatement("select * from employee where ename=?");
		ps.setString(1, ename);
		rs=ps.executeQuery();
		Emp emp=new Emp();
		if(rs.next()) {
			emp.setEid(rs.getInt("eid"));
			emp.setEname(rs.getString("ename"));
			emp.setEpass(rs.getString(3));
			emp.setEsal(rs.getInt(4));
			emp.setEcity(rs.getString(5));
			emp.setFlag(rs.getInt("flag"));
		}
		else {
			System.out.println("No Record found.....");
		}
		ps.close();rs.close();
		ConnectionUtility.closeConnection(null, null);
		return emp;
	}
	@Override
	public List<Emp> findAll()throws Exception {
		ps=con.prepareStatement("select * from employee");
		rs=ps.executeQuery();
		ArrayList<Emp> list=new ArrayList<Emp>();
		while(rs.next()) {
			Emp emp=new Emp();
			emp.setEid(rs.getInt("eid"));
			emp.setEname(rs.getString("ename"));
			emp.setEpass(rs.getString(3));
			emp.setEsal(rs.getInt(4));
			emp.setEcity(rs.getString(5));
			emp.setFlag(rs.getInt("flag"));
			list.add(emp);
		}		
		ps.close();rs.close();
		ConnectionUtility.closeConnection(null, null);
		return list;
	}
	@Override
	public int createEmployee(Emp emp) {
		try {
			ps=con.prepareStatement("insert into employee values (?,?,?,?,?,?)");
			ps.setInt(1, emp.getEid());
			ps.setString(2, emp.getEname());
			ps.setString(3, emp.getEpass());
			ps.setInt(4, emp.getEsal());
			ps.setString(5, emp.getEcity());
			ps.setInt(6, emp.getFlag());
			int i=ps.executeUpdate();
			ConnectionUtility.closeConnection(null, null);
			return i;
		}catch(Exception e) {
			try{ps.close();rs.close();}catch(Exception ee) {}
			ConnectionUtility.closeConnection(e, null);
			return 0;
		}
	}
	@Override
	public int updateEmployee(Emp emp) {
		try {
			ps=con.prepareStatement
("update employee set ename=?, epass=?,esal=?,ecity=?,flag=? where eid=?");			
			ps.setString(1, emp.getEname());
			ps.setString(2, emp.getEpass());
			ps.setInt(3, emp.getEsal());
			ps.setString(4, emp.getEcity());
			ps.setInt(5, emp.getFlag());
			ps.setInt(6, emp.getEid());
			int i=ps.executeUpdate();
			ConnectionUtility.closeConnection(null, null);
			return i;
		}catch(Exception e) {
			try{ps.close();rs.close();}catch(Exception ee) {}
			ConnectionUtility.closeConnection(e, null);
			return 0;
		}
	}
	@Override
	public int deleteEmployeeByID(int eno) {
		try {
			ps=con.prepareStatement("delete from employee where eid=?");
			ps.setInt(1, eno);
			
			int i=ps.executeUpdate();
			ConnectionUtility.closeConnection(null, null);
			return i;
		}catch(Exception e) {
			try{ps.close();rs.close();}catch(Exception ee) {}
			ConnectionUtility.closeConnection(e, null);
			return 0;
		}
	}
	@Override
	public int deleteEmployeeByName(String ename) {
		try {
			ps=con.prepareStatement("delete from employee where ename=?");
			ps.setString(1, ename);
			
			int i=ps.executeUpdate();
			ConnectionUtility.closeConnection(null, null);
			return i;
		}catch(Exception e) {
			try{ps.close();rs.close();}catch(Exception ee) {}
			ConnectionUtility.closeConnection(e, null);
			return 0;
		}
	}
}
1:05
package jdbcpack;
import java.sql.Connection;
import java.util.List;
public class TestEmployeeDAO {
	public static void main(String[] args) throws Exception{
		
		EmployeeDAO edao=new EmployeeDAOImpl(ConnectionUtility.getConnection());
		
		Emp emp=edao.findByID(1);
		
		System.out.println(emp);
		
		edao=new EmployeeDAOImpl(ConnectionUtility.getConnection());
		emp=edao.findByEname("ramu");
		
		System.out.println(emp);
		
		edao=new EmployeeDAOImpl(ConnectionUtility.getConnection());
		List<Emp> list =edao.findAll();
		
		System.out.println(list);
		
		edao=new EmployeeDAOImpl(ConnectionUtility.getConnection());
		Emp emp3=new Emp();
		emp3.setEid(3);
		emp3.setEname("rajesh");
		emp3.setEpass("jackal");
		emp3.setEsal(20000);
		emp3.setEcity("delhi");
		emp3.setFlag(0);
		int i=edao.createEmployee(emp3);
		
		System.out.println(i==1?"record inserted..":"not inserted...");
		
		edao=new EmployeeDAOImpl(ConnectionUtility.getConnection());
		emp=edao.findByEname("rajesh");
		emp.setEsal(50000);
		edao=new EmployeeDAOImpl(ConnectionUtility.getConnection());
		edao.updateEmployee(emp);
		edao=new EmployeeDAOImpl(ConnectionUtility.getConnection());
		emp=edao.findByEname("rajesh");
		System.out.println("Salary..:"+emp.getEsal());
		
		edao=new EmployeeDAOImpl(ConnectionUtility.getConnection());
		edao.deleteEmployeeByName("rajesh");
	}
}


haarisinfotech
  10:01 AM
create table item_master (itemid int(5), itemname varchar(50) primary key (itemid));
  create table inv_master(invid int(5), invname varchar(50), primary key (invid));
  CREATE TABLE inv_trans (
    ->     invid INT(5),
    ->     itemid INT(5),
    ->     qty INT(10),
    ->     PRIMARY KEY (invid, itemid),
    ->     FOREIGN KEY (invid) REFERENCES inv_master(invid),
    ->     FOREIGN KEY (itemid) REFERENCES item_master(itemid)
    -> );


haarisinfotech
  12:48 PM
Zip
 

apache-tomcat-9.0.41.zip
Zip


haarisinfotech
  1:04 PM
Zip
 

eclipse-jee-2022-03-R-win32-x86_64.zip
Zip
1:06
PDF
 

JavaScript study material.pdf
PDF


haarisinfotech
  12:31 PM
package com;
import java.io.IOException;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.annotation.WebInitParam;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
@WebServlet(
		initParams = {
				@WebInitParam(name="mykey", value="myvalue"),
				@WebInitParam(name="mykey2", value="myvalue22222")
		},
		urlPatterns = { "/ben", "/muthu", "*.mat" }
)
public class HelloServlet extends HttpServlet {
	
	@Override
	public void init(ServletConfig config) throws ServletException {
		System.out.println("init method called...");
		String m=config.getInitParameter("mykey");
		System.out.println("Config value..:"+m);
		System.out.println(config.getInitParameter("mykey2"));
	}
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("do get called....");
		doPost(request,response);
	}
	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse resp) throws ServletException, IOException {
		System.out.println("do post called....");
		String username=request.getParameter("uname");
		String password=request.getParameter("upass");
		//ServletOutputStream out=resp.getOutputStream();
		//out.println("<h1>"+username+":"+password+"</h1>");
		//resp.sendRedirect("views/anotherpage.jsp");
		RequestDispatcher rd=request.getRequestDispatcher("views/anotherpage.jsp");
		rd.forward(request, resp);
	}
	@Override
	public void destroy() {
		System.out.println("destroy method called...");
	}
	
}
12:32
PDF
 

Servlet study material.pdf
PDF


haarisinfotech
  12:55 PM
package myservletclientpack;
import java.net.URL;
import java.net.URLConnection;
public class WebClient {
	public static void main(String[] args)throws Exception {
		URL url=new URL("http://localhost:2020/vastpro/kamesh.mat");
		
		URLConnection urlcon=url.openConnection();
		
		urlcon.getInputStream();
	}
}


haarisinfotech
  11:04 AM
package com;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
/**
 * Servlet implementation class ApplicationObjectDeo
 */
@WebServlet("/appdemo")
public class ApplicationObjectDeo extends HttpServlet {
	ServletContext application;
	
	@Override
	public void init(ServletConfig config) throws ServletException {
		try {
		this.application=config.getServletContext();
		
		String url=application.getInitParameter("url");
		String username=application.getInitParameter("username");
		String password=application.getInitParameter("password");
		
		Connection con=DriverManager.getConnection(url,username,password);
		System.out.println(con);
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
synchronized	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doPost(request, response);
	}
synchronized	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//ServletContext is the application object
		this.application=request.getServletContext();
		application.setAttribute("myatt", "my att value...");
	}
}
11:05
package com;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
/**
 * Servlet implementation class ApplicationObjectDeo
 */
@WebServlet("/appdemo2")
public class ApplicationObjectDeo2 extends HttpServlet {
	ServletContext application;
	
	@Override
		public void init(ServletConfig config) throws ServletException {
			this.application=config.getServletContext();
		}
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doPost(request, response);
	}
	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//ServletContext is the application object
		this.application=request.getServletContext();
		String str=(String)application.getAttribute("myatt");
		System.out.println("Attribute...:"+str);
	}
}
11:05
package com;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.Properties;
import javax.servlet.ServletContext;
import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;
import javax.servlet.annotation.WebListener;
/**
 * Application Lifecycle Listener implementation class WebInitContextListener
 *
 */
@WebListener
public class WebInitContextListener implements ServletContextListener {
    /**
     * Default constructor.
     */
    public WebInitContextListener() {
        // TODO Auto-generated constructor stub
    }
	/**
     * @see ServletContextListener#contextDestroyed(ServletContextEvent)
     */
    public void contextDestroyed(ServletContextEvent sce)  {
         System.out.println("context destroyed...");
    }
	/**
     * @see ServletContextListener#contextInitialized(ServletContextEvent)
     */
    public void contextInitialized(ServletContextEvent sce)  {
    	try {
         System.out.println("context initialized....");
         ServletContext application=sce.getServletContext();
         String path=application.getRealPath("/WEB-INF/dbconfig.properties");
         Properties prop=new Properties();
         prop.load(new FileInputStream(path));
         String driver=prop.getProperty("driver");
         //application.setInitParameter("driver", driver);
         Class.forName(driver);
         application.setInitParameter("url", prop.getProperty("url"));
         application.setInitParameter("username", prop.getProperty("username"));
         application.setInitParameter("password", prop.getProperty("password"));
    	}catch(Exception e) {
    		e.printStackTrace();
    	}
    }
	
}


haarisinfotech
  11:42 AM
package com;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
@WebServlet("/SessionDemo")
public class SessionDemo extends HttpServlet {
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doPost(request,response);
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		HttpSession session=request.getSession();
		boolean b=session.isNew();
		if(b) {
			System.out.println("first time..the servlet connected by this client....");
			session.setAttribute("counter", 1);
		}
		else {
			System.out.println("this client has come earlier also....");
			Object o=session.getAttribute("counter");
			int n=Integer.parseInt(o.toString());
			System.out.println("comming for ..."+ ++n +" times...");
			session.setAttribute("counter", n);
		}
	}
}


haarisinfotech
  1:24 PM
Zip
 

mystruts.zip
Zip


haarisinfotech
  10:23 AM
<!--
	Scripting tags - SCRIPLET,EXPRESSION,DECLARATION
	Directive tags - PAGE, INCLUDE, TAGLIB
 -->
 <%@page import="java.time.LocalDate"%>
<%
 	String name=request.getParameter("uname");
 	out.println("<h1>java code written here...</h1>"+name);
 	
 	met();
 	
 	out.println(name2);
 	LocalDate date=LocalDate.now();
 %>
 <h1>
 <%=request.getParameter("uname") %>
 </h1>
 <%=name2 %>
 <%!
 	String name2="hello world";
 	public void met(){
	 System.out.println("met method called...");
 }
 %>


haarisinfotech
  11:53 AM
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<%@ taglib prefix="myjsp" uri="/WEB-INF/mytags.tld" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
	<myjsp:checkNumber number="<%=request.getParameter(\"num\") %>"/>
	
	
</body>
</html>
11:53
package com;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.tagext.TagSupport;
public class MyCheckNumber extends TagSupport{
	String number;
	
	public void setNumber(String number) {
		this.number=number;
	}
	
	@Override
	public int doEndTag() throws JspException {
		JspWriter out=pageContext.getOut();
		int n=Integer.parseInt(number);
		if(n%2==0) {
			try{out.println("Even Number...");}catch(Exception e) {}
		}
		else {
			try{out.println("Odd Number...");}catch(Exception e) {}
		}
		return super.doEndTag();
	}
}
11:54
2 files
 

mytags.tld
Binary

jstl-1.2.jar
Binary


haarisinfotech
  11:59 AM
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<%@ taglib prefix = "c" uri = "http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
	<c:set value="<%=request.getParameter(\"uname\") %>" var="mykey"/>
	<c:out value="${mykey}"/>
</body>
</html>


haarisinfotech
  1:14 PM
Zip
 

mystruts (2).zip
Zip


Kamesh K
  7:41 PM
formid


haarisinfotech
  12:18 PM
Zip
 

freshworks.zip
Zip


haarisinfotech
  12:43 PM
Zip
 

freshworks (2).zip
Zip


haarisinfotech
  1:00 PM
3 files
 

CSS-StudyMaterial.pdf
PDF



HTML study material.pdf
PDF



JavaScript study material.pdf
PDF




haarisinfotech
  11:43 AM
package testmavenlogger;
import java.util.logging.Logger;
public class Doctor {
	public static void main(String[] args) {
		Doctor mc=new Doctor();
		mc.doCure();
	}
	private static final String CLASS_NAME = Doctor.class.getName();
	private static Logger logger = Logger.getLogger(CLASS_NAME);
	
	public void doCure() {
		try {
		String methodName = "doCure";
		logger.entering(CLASS_NAME, "enter the dragon");
		logger.info("Cure method Called");
		logger.exiting(CLASS_NAME, "exit the dragon");
		logger.info("This method performs do cure...");
		}catch(Exception e) {
			logger.info("got exception...");
		}
	}
}
11:43
<dependency>
	    <groupId>log4j</groupId>
	    <artifactId>log4j</artifactId>
	    <version>1.2.17</version>
	</dependency>


haarisinfotech
  12:17 PM
package testmavenlogger;
import org.apache.log4j.Logger;
public class ExampleClass2 {
    private static final Logger logger = Logger.getLogger(ExampleClass2.class.getName());
    public static void main(String[] args) {
      //  logger.setLevel(Level.FINE); // Set the logging level to capture all messages
        ExampleClass2 example = new ExampleClass2();
        example.doSomething();
    }
    public void doSomething() {
        logger.info("Entered the methdo...."); // Log method entry
        System.out.println("entered....");
        try {
            // Your code here
            logger.info("This is an informational message within doSomething.");
            int result = divide(10, 2);
            logger.info("Result: " + result);
            int i=1/0;
        } catch (Exception e) {
            logger.info("An error occurred in doSomething.", e);
            logger.warn("This is a warning....because there is a exception...");
            logger.error("this is a severe error....");
        } finally {
            logger.info("Exiting the method...."); // Log method exit
        }
    }
    public int divide(int dividend, int divisor) {
        logger.info("entering the method..."); // Log method entry
        if (divisor == 0) {
            logger.error("Division by zero occurred!");
            throw new ArithmeticException("Division by zero");
        }
        int result = dividend / divisor;
        logger.info("exited divide method...."); // Log method exit
        return result;
    }
}
12:18
log4j.rootLogger = INFO, FILE
# Define the file appender
log4j.appender.FILE=org.apache.log4j.FileAppender
log4j.appender.FILE.File=myapp.log
log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
log4j.appender.FILE.layout.ConversionPattern=%d [%t] %-5p %c %x - %m%n


haarisinfotech
  9:51 AM
3 files
 

LabFiles.zip
Zip

labguide-html5-css4-jquery.pdf
PDF

LabSetupguide.pdf
PDF
9:52
python -m http.server 2000


haarisinfotech
  9:58 AM
https://meet.google.com/voy-ghqe-pux
meet.google.commeet.google.com
Meet
Real-time meetings by Google. Using your browser, share your video, desktop, and presentations with teammates and customers.


haarisinfotech
  10:55 AM
<html>
    <head>
        <script src="myscript.js" type="text/javascript"></script>
        <script>
            function changeDivValue(){
               var mydiv= document.getElementById("mydiv");
               var mytext=document.getElementById("t1").value;
               mydiv.innerHTML="<h1>"+mytext+"</h1>";
            }
        </script>
    </head>
    <body>
        <input type="text" id="t1" size="50">
        <input type="button" onclick="changeDivValue()" value="Click Me">
        <div id="mydiv">
            Default value....
        </div>
    </body>
</html>


haarisinfotech
  12:12 PM
<html>
    <head>
        <script>
            function changeDivValue(){
               var mydiv= document.getElementById("mydiv");
               var mytext=document.getElementById("t1").value;
               var xhr=new XMLHttpRequest();
               xhr.open("GET","mydata.txt");
               xhr.onreadystatechange=function(){
                //console.log(xhr.readyState+":"+xhr.status);
                if(xhr.readyState==4 && xhr.status==200){
                    var data=xhr.responseText;
                    mydiv.innerHTML="<h1>"+data+"</h1>";
                }
               }
               xhr.send(null);
               window.setTimeout("changeDivValue();",500);
            }
        </script>
    </head>
    <body>
        <input type="text" id="t1" size="50">
        <input type="button" onclick="changeDivValue()" value="Click Me">
        <div id="mydiv">
            Default value....
        </div>
    </body>
</html>
12:12
<html>
    <head>
        <script>
            function changeDivValue(){
               var mydiv= document.getElementById("mydiv");
               var mytext=document.getElementById("t1").value;
               var xhr=new XMLHttpRequest();
               xhr.open("GET","books.xml");
               xhr.onreadystatechange=function(){
                //console.log(xhr.readyState+":"+xhr.status);
                if(xhr.readyState==4 && xhr.status==200){
                    var data=xhr.responseXML;
                    // var n=data.createElement("newelement");
                    // var va=data.createTextNode("my element value...");
                    // n.appendChild(va);
                    // data.documentElement.appendChild(n);
                    // console.log(data);
                    console.log(data.documentElement.firstChild.firstChild.firstChild.nodeValue);
                    var rootele=data.documentElement;
                    console.log(rootele.childNodes.length);
                    for(var i=0;i<rootele.childNodes.length;i++){
                        for(var k=0;k<rootele.childNodes.item(i).childNodes.length;k++){
                            console.log(rootele.childNodes.item(i).childNodes.item(k).firstChild.nodeValue);
                        }
                    }
                }
               }
               xhr.send(null);
               //window.setTimeout("changeDivValue();",500);
            }
        </script>
    </head>
    <body>
        <input type="text" id="t1" size="50">
        <input type="button" onclick="changeDivValue()" value="Click Me">
        <div id="mydiv">
            Default value....
        </div>
    </body>
</html>


haarisinfotech
  10:30 AM
<html>
    <head>
        <script>
            //OBJECT CREATION OR FUNCTIONS
            var obj=new Object();
            obj.name="vastpro soft";
            obj.getName=function(){
                return this.name;
            }
            console.log(obj.getName());
            console.log(obj.getName());
            //another way
            var obj2=function(){
                var obj=new Object();
                obj.sayHello=function(){
                    console.log("hello and welcome....");
                }
                return obj;
            }
            obj2().sayHello();
            var obj3=function(name){
                var obj=new Object();
                obj.name=name;
                obj.sayHello=function(){
                    console.log("hello and welcome...."+this.name);
                }
                return obj;
            }
            obj3("vastpro").sayHello();
        </script>
    </head>
    <body>
        <h1>Object Creation</h1>
    </body>
</html>


haarisinfotech
  11:12 AM
<html>
    <head>
        <script>
            //OBJECT CREATION OR FUNCTIONS
            var obj=new Object();
            obj.name="vastpro soft";
            obj.getName=function(){
                return this.name;
            }
            console.log(obj.getName());
            console.log(obj.getName());
            //another way
            var obj2=function(){
                var obj=new Object();
                obj.sayHello=function(){
                    console.log("hello and welcome....");
                }
                return obj;
            }
            obj2().sayHello();
            var obj3=function(name){
                var obj=new Object();
                obj.name=name;
                obj.sayHello=function(){
                    console.log("hello and welcome...."+this.name);
                }
                return obj;
            }
            obj3("vastpro").sayHello();
            //another way - Function constructor
            function Human(name,age){
                this.name=name;
                this.age=age;
                this.calculatedvalue=0;
                this.display=function(){
                    console.log(this.name+":"+this.age+":"+this.calculatedvalue);
                }
                this.calculate=function(){
                    this.calculatedvalue=999;
                }
            }
            var myhuman=new Human("vastpro",10);//STATIC WAY
            myhuman.calculate();
            myhuman.display();
            //DYANMIC OBJECT CREATION
            var myhumandyna=new window['Human']("vastprodyna",20);
            myhumandyna.display();
            //CREATING AN OBJECT THROUGH REFERENCE VARIABLE
            var objcreationbyreference=new myhuman.constructor("deepcopy object",2020);
            objcreationbyreference.display();
        </script>
    </head>
    <body>
        <h1>Object Creation</h1>
    </body>
</html>


haarisinfotech
  11:27 AM
<html>
    <head>
        <script>
            //OBJECT CREATION OR FUNCTIONS
            var obj=new Object();
            obj.name="vastpro soft";
            obj.getName=function(){
                return this.name;
            }
            console.log(obj.getName());
            console.log(obj.getName());
            //another way
            var obj2=function(){
                var obj=new Object();
                obj.sayHello=function(){
                    console.log("hello and welcome....");
                }
                return obj;
            }
            obj2().sayHello();
            var obj3=function(name){
                var obj=new Object();
                obj.name=name;
                obj.sayHello=function(){
                    console.log("hello and welcome...."+this.name);
                }
                return obj;
            }
            obj3("vastpro").sayHello();
            //another way - Function constructor
            function Human(name,age){
                this.name=name;
                this.age=age;
                this.calculatedvalue=0;
                this.display=function(){
                    console.log(this.name+":"+this.age+":"+this.calculatedvalue);
                }
                this.calculate=function(){
                    this.calculatedvalue=999;
                }
            }
            var myhuman=new Human("vastpro",10);//STATIC WAY
            myhuman.calculate();
            myhuman.display();
            //DYANMIC OBJECT CREATION
            var myhumandyna=new window['Human']("vastprodyna",20);
            myhumandyna.display();
            //CREATING AN OBJECT THROUGH REFERENCE VARIABLE
            var objcreationbyreference=new myhuman.constructor("deepcopy object",2020);
            objcreationbyreference.display();
            //INHERITANCE
            function Person(){
                this.getName=function(){
                    return this.name;
                }
                this.displayDetails=function(){
                    console.log(this.name+":"+this.age);
                }
            }
            function ChairPerson(name,age){
                this.name=name;
                this.age=age;
            }
            var p=new Person();
                ChairPerson.prototype=p;//this does the magic of inheritance
                ChairPerson.prototype.constructor=ChairPerson;
            var cp=new ChairPerson("tata birla",100);
            console.log(cp.getName());
            cp.displayDetails();
            console.log(cp.constructor);
        </script>
    </head>
    <body>
        <h1>Object Creation</h1>
    </body>
</html>


haarisinfotech
  12:09 PM
<html>
    <head>
        <script>
            //VARIABLE DECLRATION
            //VAR, LET, CONST
            const name="vastprosoft";//value cannot be changed...
            let x="i am let";
            var y="i am var";
            let xx="iam let let";
            var yy="iam var var";
            function work(){
               // name="new vastprosoft";
                console.log(name);
                console.log(x+":"+y);
                x=100;y=200;
                console.log(x+":"+y);
                let xx=999;var yy=888;
                console.log(xx+":"+yy);
            }
            work();
            console.log(x+":"+y);
            console.log(xx+":"+yy);
        </script>
    </head>
</html>
<html>
    <head>
        <script>
            //VARIABLE DECLRATION
            //VAR, LET, CONST
            const name="vastprosoft";//value cannot be changed...
            function work(){
                let xx="iam let let";//block scope
                var yy="iam var var";//function scope
                {
                    let xx=999;//block scope
                    var yy=888;//function scope
                    console.log(xx+":"+yy);
                }
                console.log(xx+":"+yy);
            }
            work();
        </script>
    </head>
</html>


haarisinfotech
  11:19 AM
<html>
    <head>
        <script>
            //Arrays
            const names=["ramu","somu",1,34,23,56,function hello(){return "welcome"}];
            console.log(names[0]);
            console.log(names.length);
            for(var i=0;i<names.length;i++){
                console.log(names[i])
            }
            console.log(names);
            var f=names.pop();
            console.log(f());
            names.push("last element");
            console.log(names.pop());
            console.log(names);
            names.unshift("first");
            console.log(names);
            names[1]="this is second element";
            console.log(names);
            console.log(names.shift());//this will remove the first element
            console.log(names);
            const names2=[
                    {"ramu":"somu"},
                    [1,34,23,56],
                    function hello(){return "welcome"}
                ];
            const name3=new Array("ramu","somu");
            //two dimensional array
            const twod=[
                [1,2,3],
                [4,5,6]
            ];
            const twod2=[
                ['ramu',100],
                ['somu',200]
            ];
            const twotwo=[
                twod,twod2
            ];
        </script>
    </head>
</html>


haarisinfotech
  12:20 PM
<html>
    <head>
        <script>
            const student={
               name:'mathew' ,
               age: 22,
               marks: 90
            }
            let m=student['marks'];
            console.log(`${m}`);
            console.log(student['name']);
            for(let k in student){
                console.log(k+":"+student[k]);
                console.log(`${student[k]}`);
            }
        </script>
    </head>
</html>
12:24
<html>
    <head>
        <script>
            try{
                console.log("before error...");
                var i=1/0;
                console.log(i);
                console.log("after error...");
            }catch(e){
                console.log("Error...:"+e);
            }
            finally{
                console.log("finally called...");
            }
        </script>
    </head>
</html>


haarisinfotech
  1:04 PM
6 files
 

inheritance.html
HTML

inheritance2.html
HTML

modular.html
HTML

prototype.html
HTML

singleton.html
HTML

singleton2.html
HTML
1:04
3 files
 

decorate.html
HTML

observer.html
HTML

command.html
HTML
1:05
5 files
 

command.html
HTML

fan.html
HTML

shoeexample.html
HTML

dog.html
HTML

paint.html
HTML


haarisinfotech
  10:50 AM
<html>
    <head>
        <script>
            function outer(n){
                let x="hello";
                let met=function(){
                    console.log("met function called....");
                }
                function inner(m){
                    console.log(n+":"+m+":"+x);
                    met();
                }
               return inner;
            }
            var obj=new outer("outer value...");
            obj("inner value...");
        </script>
    </head>
</html>


haarisinfotech
  11:31 AM
<html>
    <head>
        <script>
            function hello(m){
                this.m=m;
                this.getM=function(){
                    return this.m;
                }
                this.setM=function(m){
                    this.m=m;
                }
                this.display=function(){
                    console.log("mvalue...:"+this.m);
                }
            }
            var obj=new hello("m value...");
            console.log(obj.getM());
            obj.setM("new value of m...");
            console.log(obj.getM());
            //ES6
            class MyHello{
                constructor(m="default value.."){
                    this.m=m;
                }
                display(){
                    console.log("m value..."+this.m);
                }
                setM(m){
                    this.m=m;
                }
                getM(){
                    return this.m;
                }
            }
            var myobj=new MyHello();
            myobj.display();
            myobj.setM("the new value....");
            console.log(myobj.getM());
            console.log(typeof(myobj));
            class Person{
                display(){
                    console.log(this.name+":"+this.age);
                }
            }
            class ChairPerson extends Person{
                constructor(name,age){
                    super();
                    this.name=name;
                    this.age=age;
                }
                display(){
                    console.log("overriden display method...");
                    super.display();
                }
            }
            var cp=new ChairPerson("mahatma gandi",200);
            cp.display();
            console.log(cp.constructor);
        </script>
    </head>
</html>


haarisinfotech
  1:20 PM
<html>
    <meta http-equiv="refresh"
    content="1; http://192.168.225.224:2000/web1.html" />
</html>


haarisinfotech
  12:39 PM
<properties>
    <resteasy.version>3.0.14.Final</resteasy.version>
</properties>
  	<dependencies>
<!-- https://mvnrepository.com/artifact/org.jboss.resteasy/resteasy-dependencies -->
<!-- https://mvnrepository.com/artifact/org.jboss.resteasy/resteasy-jaxrs -->
<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core -->
<!--dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-core</artifactId>
    <version>2.15.2</version>
</dependency-->
<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
<!--dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.15.2</version>
</dependency -->
<!-- https://mvnrepository.com/artifact/jakarta.ws.rs/jakarta.ws.rs-api -->
<!--dependency>
    <groupId>jakarta.ws.rs</groupId>
    <artifactId>jakarta.ws.rs-api</artifactId>
    <version>3.1.0</version>
</dependency -->
<dependency>
      <groupId>org.jboss.resteasy</groupId>
      <artifactId>resteasy-jaxrs</artifactId>
      <version>3.1.4.Final</version>
</dependency>
<dependency>
      <groupId>org.jboss.resteasy</groupId>
      <artifactId>resteasy-jaxb-provider</artifactId>
      <version>3.1.4.Final</version>
</dependency>
<dependency>
      <groupId>org.jboss.resteasy</groupId>
      <artifactId>resteasy-servlet-initializer</artifactId>
      <version>3.1.4.Final</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.jboss.resteasy/resteasy-jackson2-provider -->
<dependency>
    <groupId>org.codehaus.jackson</groupId>
    <artifactId>jackson-jaxrs</artifactId>
    <version>1.9.13</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-xc -->
<dependency>
    <groupId>org.codehaus.jackson</groupId>
    <artifactId>jackson-xc</artifactId>
    <version>1.9.13</version>
</dependency>
	</dependencies>


haarisinfotech
  1:02 PM
package myjersey;
import java.util.HashSet;
import java.util.Set;
import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;
@ApplicationPath("rest")
public class HelloWorldApplication extends Application {
   public HelloWorldApplication() {
   }
   @Override
   public Set<Object> getSingletons() {
       HashSet<Object> set = new HashSet<Object>();
       return set;
   }
}
1:02
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
  <display-name>myresteasytom</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.jsp</welcome-file>
    <welcome-file>default.htm</welcome-file>
  </welcome-file-list>
   <context-param>
      <param-name>resteasy.servlet.mapping.prefix</param-name>
      <param-value>/rest</param-value>
   </context-param>
</web-app>
1:04
package myjersey;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
//http://localhost:2020/myrestproj/rest/laxmi
@Path("shoiab")
public class VastproService {
	
	@GET
	public void sayHello() {
		System.out.println("welcome to rest....");
	}
}


Gurunathan Premkumar
  2:01 PM
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>myRest</groupId>
	<artifactId>myRest</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
	<properties>
		<resteasy.version>3.0.14.Final</resteasy.version>
	</properties>
	<dependencies>
		<!--
		https://mvnrepository.com/artifact/org.jboss.resteasy/resteasy-dependencies -->
		<!--
		https://mvnrepository.com/artifact/org.jboss.resteasy/resteasy-jaxrs -->
		<!--
		https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core -->
		<!--dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-core</artifactId>
    <version>2.15.2</version>
</dependency-->
		<!--
		https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
		<!--dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.15.2</version>
</dependency -->
		<!-- https://mvnrepository.com/artifact/jakarta.ws.rs/jakarta.ws.rs-api -->
		<!--dependency>
    <groupId>jakarta.ws.rs</groupId>
    <artifactId>jakarta.ws.rs-api</artifactId>
    <version>3.1.0</version>
</dependency -->
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-jaxrs</artifactId>
			<version>3.1.4.Final</version>
		</dependency>
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-jaxb-provider</artifactId>
			<version>3.1.4.Final</version>
		</dependency>
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-servlet-initializer</artifactId>
			<version>3.1.4.Final</version>
		</dependency>
		<!--
		https://mvnrepository.com/artifact/org.jboss.resteasy/resteasy-jackson2-provider -->
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-jaxrs</artifactId>
			<version>1.9.13</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-xc -->
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-xc</artifactId>
			<version>1.9.13</version>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<release>17</release>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>3.2.3</version>
			</plugin>
		</plugins>
	</build>
</project>


haarisinfotech
  9:46 AM
http://localhost:8080/your-web-app-context/api/book/Java;author=John;genre=Programming (replace your-web-app-context with your actual context path) to get book information with matrix parameters.
Get Book Info with Missing Parameters: Make a GET request to http://localhost:8080/your-web-app-context/api/book/Java;author=John with only one matrix parameter to see the response.
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
@Path("/api")
public class MyResource {
    @GET
    @Path("/book/{title}")
    @Produces(MediaType.TEXT_PLAIN)
    public Response getBookInfo(
        @PathParam("title") String title,
        @MatrixParam("author") String author,
        @MatrixParam("genre") String genre
    ) {
        if (title != null) {
            StringBuilder response = new StringBuilder("Book Title: ").append(title);
            if (author != null) {
                response.append("\nAuthor: ").append(author);
            }
            if (genre != null) {
                response.append("\nGenre: ").append(genre);
            }
            return Response.ok(response.toString()).build();
        } else {
            return Response.status(Response.Status.BAD_REQUEST).entity("Title parameter is required").build();
        }
    }
}
2. Greet with a Name Parameter: Make a GET request to http://localhost:8080/your-web-app-context/api/greet?name=John (replace your-web-app-context with your actual context path) to get a greeting with the specified name.
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
@Path("/api")
public class MyResource {
    @GET
    @Path("/greet")
    @Produces(MediaType.TEXT_PLAIN)
    public Response greet(@QueryParam("name") String name) {
        if (name != null && !name.isEmpty()) {
            return Response.ok("Hello, " + name + "!").build();
        } else {
            return Response.status(Response.Status.BAD_REQUEST).entity("Name parameter is required").build();
        }
    }
}
Greet with Name and Age Parameters: Make a GET request to http://localhost:8080/your-web-app-context/api/greet?name=John&age=30 with both name and age parameters to get a greeting with age information.
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
@Path("/api")
public class MyResource {
    @GET
    @Path("/greet")
    @Produces(MediaType.TEXT_PLAIN)
    public Response greet(
        @QueryParam("name") String name,
        @QueryParam("age") int age
    ) {
        if (name != null && !name.isEmpty()) {
            String greeting = "Hello, " + name + "!";
            if (age > 0) {
                greeting += " You are " + age + " years old.";
            }
            return Response.ok(greeting).build();
        } else {
            return Response.status(Response.Status.BAD_REQUEST).entity("Name parameter is required").build();
        }
    }
}
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.ws.rs.*;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
@Path("/api")
public class MyResource {
    @Context
    private HttpServletRequest request;
    @POST
    @Path("/login")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public Response login(@FormParam("username") String username, @FormParam("password") String password) {
        // Simulate user authentication (replace with your actual authentication logic)
        if ("user123".equals(username) && "password123".equals(password)) {
            // Create a new session or get the existing one
            HttpSession session = request.getSession(true);
            session.setAttribute("authenticated", true);
            return Response.ok("Login successful").build();
        } else {
            return Response.status(Response.Status.UNAUTHORIZED).entity("Login failed").build();
        }
    }
    @GET
    @Path("/protected")
    @Produces(MediaType.TEXT_PLAIN)
    public Response getProtectedResource() {
        HttpSession session = request.getSession(false);
        if (session != null && session.getAttribute("authenticated") != null) {
            return Response.ok("Protected resource accessed").build();
        } else {
            return Response.status(Response.Status.UNAUTHORIZED).entity("Unauthorized").build();
        }
    }
}


haarisinfotech
  1:17 PM
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
<script>
	const data={"id":3,"name":"salman khan"};
	
	const datas=[{"id":1,"name":"shoiab"},{"id":2,"name":"newcollege"}];
	
	console.log(data.name);
	
	console.log(datas[0].name)
	
	for(let x in datas){
		console.log(datas[x].name);
	}
	
	//arrow function - lambda
	function greet(){
		console.log("welcome...");
	}
	greet();
	
	let greet2=()=>{
		console.log("welcome greet2...arrow function...");
	}
	greet2();
	
	let greet3=(x,y)=>{
		console.log("welcome...."+x+":"+y);
		return x+":"+y;
	}
	
	console.log(greet3("kamal","kamesh"));
	
	
</script>
</head>
<body>
</body>
</html>


haarisinfotech
  1:37 PM
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
<script>
    const url="http://localhost:2020/restfreshworks/rest/panchatanthra/user";
    fetch(url,{
        mode:'no-cors'
    }).then(response=>{
        console.log("called...");
        return response.json();
    }).then(data=>{
        console.log(data);
    }).catch(error=>{
        console.log(error);
    });
</script>
</head>
<body>
</body>
</html>
1:37
<html>
    <head>
        <script>
            // Define the URL of the RESTful service
const apiUrl = 'http://localhost:2020/freshworks/rest/panchatanthra/users'; // Replace with your API URL
// Make a GET request to the API
fetch(apiUrl,{mode:'no-cors'})
  .then(response => {
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    return response.json(); // Parse the response as JSON
  })
  .then(data => {
    // Handle the data received from the API
    console.log('Data from the API:', data);
    // You can perform further processing here
  })
  .catch(error => {
    // Handle any errors that occurred during the fetch
    console.error('Fetch error:', error);
  });
        </script>
    </head>
</html>
1:38
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Form Submission</title>
    <script>
    document.addEventListener('DOMContentLoaded', function () {
        // Get a reference to the form element
        const form = document.getElementById('myForm');
        // Add a submit event listener to the form
        form.addEventListener('submit', function (event) {
            event.preventDefault(); // Prevent the default form submission
            // Get form data as a FormData object
            const formData1 = new FormData(form);
            const formData = new URLSearchParams();
            //formData.append('uname', 'ramu');
            //formData.append('upass', 'secret');
            for (const [field, value] of formData1) {
                console.log(`${field}: ${value}`);
                formData.append(field,value);
            }
            // Define the URL of the RESTful endpoint
            const apiUrl = 'http://localhost:2020/restfreshworks/rest/controller/login'; // Replace with your API URL
            // Make a POST request to the API with the form data
            fetch(apiUrl, {
                method: 'POST',
                body: formData,
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                mode:'no-cors'
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                //return response.json(); // Parse the response as JSON
                return response.text();
            })
            .then(data => {
                // Handle the response data from the API
                console.log('Response data:', data);
                // You can perform further processing here
            })
            .catch(error => {
                // Handle any errors that occurred during the fetch
                console.error('Fetch error:', error);
            });
        });
    });
    </script>
</head>
<body>
    <form id="myForm" method="POST">
        <label for="username">Name:</label>
        <input type="text" id="uname" name="uname"><br><br>
        <label for="password">Email:</label>
        <input type="text" id="upass" name="upass"><br><br>
        <input type="submit" value="Submit">
    </form>
</body>
</html>


haarisinfotech
  12:32 PM
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<head>
    <script src="https://unpkg.com/react@16/umd/react.production.min.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js" crossorigin></script>
    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
    <script src="https://unpkg.com/prop-types@15.6/prop-types.min.js"></script>
    <script src="https://unpkg.com/react@0.14.0/dist/react-with-addons.js"></script>
    <script src="https://unpkg.com/react-dom@0.14.0/dist/react-dom.js"></script>
	<script type="text/babel">
		class Training extends React.Component{
			render(){
				return(<h3>Training tag...{this.props.trainer}</h3>);
			}
		}
		class Development extends React.Component{
		render(){
				return(<h3>Development tag...{this.props.manager}</h3>);
			}
		}
		class Vastpro extends React.Component{
			
			constructor(){
				super();
				this.data={
					"name":"gokul",
					"age":24
				};
				this.cname="vastpro technologies...";
			}
			render(){
				return (
					<div>
						<Training trainer="shoiab"/>
						<h3>{this.cname}</h3>					
						<div>{this.props.cname}This is the new content....{this.data.name}</div>
						
						<Development manager="sathish"/>
					</div>
					);
			}
		}
		ReactDOM.render(
			<Vastpro cname="vastpro techno solutions..."/>,
			document.getElementById('mydiv')
		);
	</script>
</head>
<body>
	<div id="mydiv">This is div tag...</div>
</body>
</html>


haarisinfotech
  9:53 AM
PDF
 

ReactJS-Lab1.pdf
PDF


haarisinfotech
  12:29 PM
<html>
    <head>
        <script src="https://unpkg.com/react@16/umd/react.production.min.js" crossorigin></script>
        <script src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js" crossorigin></script>
        <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
        <script type="text/babel">
            class Greeting extends React.Component{
                render(){
                    return (<h1>Welcome to React</h1>);
                }
            }
            ReactDOM.render(
                <Greeting/>,
                document.getElementById("mydiv")
            );
        </script>
    </head>
    <body>
        <div id="mydiv">
            This is holder tag...
        </div>
    </body>
</html>
12:30
<html>
    <head>
        <style>
        </style>
        <link rel="stylesheet" type="text/css" href="mystyle.css">
        <script src="https://unpkg.com/react@16/umd/react.production.min.js" crossorigin></script>
        <script src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js" crossorigin></script>
        <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
        <script type="text/babel">
            function doAdditionOutside(){//global function
                return 99+99;
            }
            class Greeting extends React.Component{
                constructor(){
                    super();
                    this.num=10;//global variable
                }
                doAddition(){//global function
                    var add=doAdditionOutside();
                    return this.num+100+add;
                }
                render(){
                    let num2=999;//local variable
                    function a(){//local function
                        return 10;
                    }
                    return (
                        <div>
                            <div>
                                {this.num}
                                <br></br>
                                {this.doAddition()}<br></br>
                                {num2}<br></br>
                                {a()}
                            </div>
                        </div>
                        );
                }
            }
            ReactDOM.render(
                <Greeting/>,
                document.getElementById("mydiv")
            );
        </script>
    </head>
    <body>
        <div id="mydiv">
            This is holder tag...
        </div>
    </body>
</html>
12:30
<html>
    <head>
        <style>
            div > div {color:red;font-size: 30pt;}
        </style>
        <script src="https://unpkg.com/react@16/umd/react.production.min.js" crossorigin></script>
        <script src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js" crossorigin></script>
        <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
        <script type="text/babel">
           class Greeting extends React.Component{
            render(){
                return(
                    <div>
                        <Header cname="Vastpro Technologies..."/>
                        <hr></hr>
                        <br></br>
                        <Content/>
                        <br></br>
                        <hr></hr>
                        <Footer address="Eddaduthangel.....Chennai...."/>
                    </div>
                );
            }
           }
           class Header extends React.Component{
                render(){
                    return(
                        <h1 align='center'>{this.props.cname}</h1>
                    );
                }
           }
           class Footer extends React.Component{
            render(){
                    return(
                        <h1 align='center'>{this.props.address}</h1>
                    );
                }
            }
           class Content extends React.Component{
            render(){
                    return(
                        <h2><pre>This
                                    is
                                        the
                                            content
                                                    page....</pre></h2>
                    );
                }
           }
            ReactDOM.render(
                <Greeting/>,
                document.getElementById("mydiv")
            );
        </script>
    </head>
    <body>
        <div id="mydiv">
            This is holder tag...
        </div>
    </body>
</html>


haarisinfotech
  1:05 PM
<html>
    <head>
        <style>
            div > div {color:red;font-size: 30pt;}
        </style>
        <script src="https://unpkg.com/react@16/umd/react.production.min.js" crossorigin></script>
        <script src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js" crossorigin></script>
        <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
        <script type="text/babel">
           class Greeting extends React.Component{
            render(){
                const names={
                    name1:"guru",
                    name2:"hari"
                }
                var othernames={
                    name1:"prashanth",
                    name2:"kailash"
                }
                this.somenames={
                    name1:"mathew",
                    name2:"narendra"
                }
                return(
                    <div>
                        {this.props.myattribute}<br></br>
                        {names.name1+":"+names.name2}<br></br>
                        {othernames.name1+":"+othernames.name2}<br></br>
                        {this.somenames.name1+":"+this.somenames.name2}<br></br>
                        {
                            names.name1=this.props.myattribute
                        }
                        {names.name1}
                    </div>
                );
            }
           }
          Greeting.defaultProps={
            myattribute:"this is the default value..."
          }
            ReactDOM.render(
                (
                <div>
                    <Greeting myattribute="this is custom value..."/>
                </div>
                ),
                document.getElementById("mydiv")
            );
        </script>
    </head>
    <body>
        <div id="mydiv">
            This is holder tag...
        </div>
    </body>
</html>


haarisinfotech
  10:49 AM
package interfacepack;
import java.util.AbstractList;
import java.util.Arrays;
import java.util.RandomAccess;
public class CustomRandomAccessList<E> extends AbstractList<E> {//implements RandomAccess {
    private Object[] elements;
    private int size;
    public CustomRandomAccessList(int initialCapacity) {
        if (initialCapacity < 0) {
            throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity);
        }
        this.elements = new Object[initialCapacity];
    }
    @Override
    public E get(int index) {
    	if(this instanceof RandomAccess) {
		        if (index < 0 || index >= size) {
		            throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size);
		        }
	       return (E) elements[index];
    	}else {
    		throw new UnsupportedOperationException("Random access is not supported");
    	}
    }
    @Override
    public int size() {
        return size;
    }
    public boolean add(E element) {
        ensureCapacity(size + 1);
        elements[size++] = element;
        return true;
    }
    private void ensureCapacity(int minCapacity) {
        if (minCapacity - elements.length > 0) {
            int newCapacity = elements.length * 2;
            if (newCapacity - minCapacity < 0) {
                newCapacity = minCapacity;
            }
            elements = Arrays.copyOf(elements, newCapacity);
        }
    }
    public static void main(String[] args) {
        CustomRandomAccessList<String> customList = new CustomRandomAccessList<>(10);
        customList.add("Apple");
        customList.add("Banana");
        customList.add("Cherry");
        System.out.println("Fruit at index 1: " + customList.get(1));
    }
}


Mr.Narendhiran k
  11:14 AM
https://meet.google.com/gjf-vzgm-xxw
meet.google.commeet.google.com
Meet
Real-time meetings by Google. Using your browser, share your video, desktop, and presentations with teammates and customers.


haarisinfotech
  10:18 AM
image.png
 
image.png


haarisinfotech
  10:33 AM
$ password
 Changes the password
   $ ls
 List all the files in the directory
   $ whoami
 The current user who is loged in
   $users
 Users who are logged into the system
   $who
 Users with date and time
   $halt
 Brings the system down immediately
   $poweroff
 Shutdown and poweroff
   $reboot
 Reboots the system
   $shutdown
 Shutdown the system
   $cal
 Start a calculator
   $ls –l
 List the directories with more info
   $ls ch*.doc
 names of which start with ch and end with .doc
   $ls –a
 List hidden files
   $vi filename
 File created
   $ cat filename
 Command to see the content filename
   $cp sourfile destinationfile
 Copy the file
   $mv filename newname
 To rename the file
   $rm filename
 Delete file
   $cd ~
 To go to home directory
   $cd -
 To go in your last directory
   $ls dirname
Ex: $ls users/dev
 To list files in a directory
   $mkdir dev
 Create a new directory
   $rmdir dirname
 To remove directory
   $mv olddir newdir
 To rename a directory
   $cd dirname
 To Change directory
   $path
 To set path $path=/bin:/usr/bin
   $ping google.com
 To check the availability of a host
   $telnet aaa.com
 Connect to a remote machine and work
   Vi editor
   $vi myfile
 Creates a new file if it does not exist or else open a existing file
   Editor Commands
   :q
 Quit
   :wq
 Save and quit
   :!
 To run commands - ex :! Ls
10:34
https://www.tutorialspoint.com/execute_ksh_online.php
TutorialsPointTutorialsPoint
Online Ksh Shell Compiler
Online Ksh Shell Compiler - The best online Korn Shell (ksh script) programming compiler and editor provides an easy to use and simple Integrated Development Environment (IDE) for the students and working professionals to Edit, Save, Compile, Execute and Share Korn Shell (ksh) source code with in your browser itself.
10:34
https://www.onlinegdb.com/online_bash_shell


haarisinfotech
  11:14 AM
echo "What is your name..:"
read uname
echo "Welcome Mr...:" $uname " to shell programming"
read -p "what is your company name...:" cname
echo "We welcome M/s...:" $cname
#_validname, valid_2_name, _valid2  -  valid name
#-invalidname, 2invalidname, *name - invalid names


haarisinfotech
  11:32 AM
name[0]='ramu'
name[1]='somu'
name[2]='monu'
echo ${name[0]}
echo ${name[*]}
names[0,0]='ramu'
names[0,1]='somu'
names[1,0]='rajesh'
names[1,1]='somesh'
echo ${names[0,1]}
for((i=0;i<3;i++));do
    echo ${name[i]}
done
for((i=0;i<2;i++));do
    for((j=0;j<2;j++));do
        echo ${names[i,j]}
    done
done


haarisinfotech
  12:06 PM
num1=10
num2=3
val=$((num1 % num2))
echo $val
grade="A"
if["$grade" == "A"]; then
    echo "Its A Grade....."
elif["$grade" == "B"]; then
    echo "its B Grade..."
else
echo "No grade...."
fi


haarisinfotech
  12:26 PM
num1=10
num2=3
val=$((num1 % num2))
echo $val
read -p "Enter a number..:" number
echo $number
if [ $number == 0 ]; then
    echo "This is zero...."
elif [ $number -gt 10 ]; then
    echo "This is a number greater than 10"
else
    echo "some number..."
fi
sayHello(){
    echo "Welcome to functions..."$1"..."$2
    return 100
}
sayHello shoiab vastpro
ret=$?
echo $ret


haarisinfotech
  12:35 PM
PDF
 

SHELL SCRIPT.pdf
PDF


Gurunathan Premkumar
  11:54 AM
<html>
    <head>
        <script>
            function changeDivValue() {
                var mydiv = document.getElementById("mydiv");
                var mytext = document.getElementById("t1").value;
                console.log(mytext);
                var xhr = new XMLHttpRequest();
                xhr.open("GET", "mydata.txt");
                xhr.onreadystatechange = function () {
                    console.log(xhr.readyState + ":" + xhr.status);
                    if (xhr.readyState == 4 && xhr.status == 200) {
                        var data = xhr.responseText;
                        mydiv.innerHTML = "<h1>" + data + "</h1>";
                    }
                };
                xhr.send(null);
                window.setTimeout("changeDivValue();", 10000);
            }
        </script>
    </head>
    <body>
        <input type="text" id="t1" size="50" />
        <input type="button" onclick="changeDivValue()" value="Click Me" />
        <div id="mydiv">Default value....</div>
    </body>
</html>
11:55
<html>
    <head>
        <script>
            function changeDivValue() {
                var mydiv = document.getElementById("mydiv");
                var mytext = document.getElementById("t1").value;
                var xhr = new XMLHttpRequest();
                xhr.open("GET", "books.xml");
                xhr.onreadystatechange = function () {
                    //console.log(xhr.readyState+":"+xhr.status);
                    if (xhr.readyState == 4 && xhr.status == 200) {
                        var data = xhr.responseXML;
                        // var n=data.createElement("newelement");
                        // var va=data.createTextNode("my element value...");
                        // n.appendChild(va);
                        // data.documentElement.appendChild(n);
                        // console.log(data);
                        console.log(
                            data.documentElement.firstChild.firstChild.firstChild.nodeValue
                        );
                        var rootele = data.documentElement;
                        console.log(rootele.childNodes.length);
                        for (var i = 0; i < rootele.childNodes.length; i++) {
                            for (
                                var k = 0;
                                k < rootele.childNodes.item(i).childNodes.length;
                                k++
                            ) {
                                console.log(
                                    rootele.childNodes.item(i).childNodes.item(k).firstChild
                                        .nodeValue
                                );
                            }
                        }
                    }
                };
                xhr.send(null);
                //window.setTimeout("changeDivValue();",500);
            }
        </script>
    </head>
    <body>
        <input type="text" id="t1" size="50" />
        <input type="button" onclick="changeDivValue()" value="Click Me" />
        <div id="mydiv">Default value....</div>
    </body>
</html>

React

Reply
